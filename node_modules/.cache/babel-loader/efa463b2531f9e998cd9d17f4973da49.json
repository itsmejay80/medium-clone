{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nvar _regeneratorRuntime = require(\"D:\\\\medium clone\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _slicedToArray = require(\"D:\\\\medium clone\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"D:\\\\medium clone\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"D:\\\\medium clone\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\medium clone\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar gax = require(\"google-gax\");\n\nvar path = require(\"path\");\n\nvar gapicConfig = require(\"./firestore_admin_client_config.json\");\n\nvar google_gax_1 = require(\"google-gax\");\n\nvar version = require('../../../package.json').version;\n/**\n *  Operations are created by service `FirestoreAdmin`, but are accessed via\n *  service `google.longrunning.Operations`.\n * @class\n * @memberof v1\n */\n\n\nvar FirestoreAdminClient = /*#__PURE__*/function () {\n  /**\n   * Construct an instance of FirestoreAdminClient.\n   *\n   * @param {object} [options] - The configuration object. See the subsequent\n   *   parameters for more details.\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   */\n  function FirestoreAdminClient(opts) {\n    _classCallCheck(this, FirestoreAdminClient);\n\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    }; // Ensure that options include the service address and port.\n\n    var staticMembers = this.constructor;\n    var servicePath = opts && opts.servicePath ? opts.servicePath : opts && opts.apiEndpoint ? opts.apiEndpoint : staticMembers.servicePath;\n    var port = opts && opts.port ? opts.port : staticMembers.port;\n\n    if (!opts) {\n      opts = {\n        servicePath: servicePath,\n        port: port\n      };\n    }\n\n    opts.servicePath = opts.servicePath || servicePath;\n    opts.port = opts.port || port; // users can override the config from client side, like retry codes name.\n    // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/master/src/gax.ts#L546\n    // The way to override client config for Showcase API:\n    //\n    // const customConfig = {\"interfaces\": {\"google.showcase.v1beta1.Echo\": {\"methods\": {\"Echo\": {\"retry_codes_name\": \"idempotent\", \"retry_params_name\": \"default\"}}}}}\n    // const showcaseClient = new showcaseClient({ projectId, customConfig });\n\n    opts.clientConfig = opts.clientConfig || {}; // If we're running in browser, it's OK to omit `fallback` since\n    // google-gax has `browser` field in its `package.json`.\n    // For Electron (which does not respect `browser` field),\n    // pass `{fallback: true}` to the FirestoreAdminClient constructor.\n\n    this._gaxModule = opts.fallback ? gax.fallback : gax; // Create a `gaxGrpc` object, with any grpc-specific options\n    // sent to the client.\n\n    opts.scopes = this.constructor.scopes;\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Determine the client header string.\n\n    var clientHeader = [\"gax/\".concat(this._gaxModule.version), \"gapic/\".concat(version)];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(\"gl-node/\".concat(process.versions.node));\n    } else {\n      clientHeader.push(\"gl-web/\".concat(this._gaxModule.version));\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(\"grpc/\".concat(this._gaxGrpc.grpcVersion));\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(\"\".concat(opts.libName, \"/\").concat(opts.libVersion));\n    } // Load the applicable protos.\n    // For Node.js, pass the path to JSON proto file.\n    // For browsers, pass the JSON content.\n\n\n    var nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n    this._protos = this._gaxGrpc.loadProto(opts.fallback ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('../../protos/protos.json') : nodejsProtoPath); // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n\n    this.pathTemplates = {\n      collectionGroupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}'),\n      databasePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}'),\n      fieldPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/fields/{field}'),\n      indexPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/indexes/{index}')\n    }; // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this.descriptors.page = {\n      listIndexes: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'indexes'),\n      listFields: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'fields')\n    }; // This API contains \"long-running operations\", which return a\n    // an Operation object that allows for tracking of the operation,\n    // rather than holding a request open.\n\n    var protoFilesRoot = opts.fallback ? this._gaxModule.protobuf.Root.fromJSON( // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('../../protos/protos.json')) : this._gaxModule.protobuf.loadSync(nodejsProtoPath);\n    this.operationsClient = this._gaxModule.lro({\n      auth: this.auth,\n      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined\n    }).operationsClient(opts);\n    var createIndexResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Index');\n    var createIndexMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.IndexOperationMetadata');\n    var updateFieldResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Field');\n    var updateFieldMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.FieldOperationMetadata');\n    var exportDocumentsResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsResponse');\n    var exportDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsMetadata');\n    var importDocumentsResponse = protoFilesRoot.lookup('.google.protobuf.Empty');\n    var importDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ImportDocumentsMetadata');\n    this.descriptors.longrunning = {\n      createIndex: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createIndexResponse.decode.bind(createIndexResponse), createIndexMetadata.decode.bind(createIndexMetadata)),\n      updateField: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateFieldResponse.decode.bind(updateFieldResponse), updateFieldMetadata.decode.bind(updateFieldMetadata)),\n      exportDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, exportDocumentsResponse.decode.bind(exportDocumentsResponse), exportDocumentsMetadata.decode.bind(exportDocumentsMetadata)),\n      importDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importDocumentsResponse.decode.bind(importDocumentsResponse), importDocumentsMetadata.decode.bind(importDocumentsMetadata))\n    }; // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.firestore.admin.v1.FirestoreAdmin', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {};\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  _createClass(FirestoreAdminClient, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this = this;\n\n      // If the client stub promise is already initialized, return immediately.\n      if (this.firestoreAdminStub) {\n        return this.firestoreAdminStub;\n      } // Put together the \"service stub\" for\n      // google.firestore.admin.v1.FirestoreAdmin.\n\n\n      this.firestoreAdminStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.firestore.admin.v1.FirestoreAdmin') : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this._protos.google.firestore.admin.v1.FirestoreAdmin, this._opts); // Iterate over each of the methods that the service provides\n      // and create an API call method for each.\n\n      var firestoreAdminStubMethods = ['createIndex', 'listIndexes', 'getIndex', 'deleteIndex', 'getField', 'updateField', 'listFields', 'exportDocuments', 'importDocuments'];\n\n      var _loop = function _loop() {\n        var methodName = _firestoreAdminStubMe[_i];\n\n        var callPromise = _this.firestoreAdminStub.then(function (stub) {\n          return function () {\n            if (_this._terminated) {\n              return Promise.reject('The client has already been closed.');\n            }\n\n            var func = stub[methodName];\n\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            return func.apply(stub, args);\n          };\n        }, function (err) {\n          return function () {\n            throw err;\n          };\n        });\n\n        var apiCall = _this._gaxModule.createApiCall(callPromise, _this._defaults[methodName], _this.descriptors.page[methodName] || _this.descriptors.stream[methodName] || _this.descriptors.longrunning[methodName]);\n\n        _this.innerApiCalls[methodName] = apiCall;\n      };\n\n      for (var _i = 0, _firestoreAdminStubMe = firestoreAdminStubMethods; _i < _firestoreAdminStubMe.length; _i++) {\n        _loop();\n      }\n\n      return this.firestoreAdminStub;\n    }\n    /**\n     * The DNS address for this API service.\n     */\n\n  }, {\n    key: \"getProjectId\",\n\n    /**\n     * Return the project ID used by this class.\n     * @param {function(Error, string)} callback - the callback to\n     *   be called with the current project Id.\n     */\n    value: function getProjectId(callback) {\n      if (callback) {\n        this.auth.getProjectId(callback);\n        return;\n      }\n\n      return this.auth.getProjectId();\n    }\n    /**\n     * Gets a composite index.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. A name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Index]{@link google.firestore.admin.v1.Index}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n\n  }, {\n    key: \"getIndex\",\n    value: function getIndex(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        name: request.name || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.getIndex(request, options, callback);\n    }\n    /**\n     * Deletes a composite index.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. A name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n\n  }, {\n    key: \"deleteIndex\",\n    value: function deleteIndex(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        name: request.name || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.deleteIndex(request, options, callback);\n    }\n    /**\n     * Gets the metadata and configuration for a Field.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. A name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Field]{@link google.firestore.admin.v1.Field}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n\n  }, {\n    key: \"getField\",\n    value: function getField(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        name: request.name || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.getField(request, options, callback);\n    }\n    /**\n     * Creates a composite index. This returns a {@link google.longrunning.Operation|google.longrunning.Operation}\n     * which may be used to track the status of the creation. The metadata for\n     * the operation will be the type {@link google.firestore.admin.v1.IndexOperationMetadata|IndexOperationMetadata}.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {google.firestore.admin.v1.Index} request.index\n     *   Required. The composite index to create.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n\n  }, {\n    key: \"createIndex\",\n    value: function createIndex(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.createIndex(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by the createIndex() method.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *\n     * @example:\n     *   const decodedOperation = await checkCreateIndexProgress(name);\n     *   console.log(decodedOperation.result);\n     *   console.log(decodedOperation.done);\n     *   console.log(decodedOperation.metadata);\n     *\n     */\n\n  }, {\n    key: \"checkCreateIndexProgress\",\n    value: function () {\n      var _checkCreateIndexProgress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name) {\n        var request, _yield$this$operation, _yield$this$operation2, operation, decodeOperation;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n                  name: name\n                });\n                _context.next = 3;\n                return this.operationsClient.getOperation(request);\n\n              case 3:\n                _yield$this$operation = _context.sent;\n                _yield$this$operation2 = _slicedToArray(_yield$this$operation, 1);\n                operation = _yield$this$operation2[0];\n                decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createIndex, gax.createDefaultBackoffSettings());\n                return _context.abrupt(\"return\", decodeOperation);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function checkCreateIndexProgress(_x) {\n        return _checkCreateIndexProgress.apply(this, arguments);\n      }\n\n      return checkCreateIndexProgress;\n    }()\n    /**\n     * Updates a field configuration. Currently, field updates apply only to\n     * single field index configuration. However, calls to\n     * {@link google.firestore.admin.v1.FirestoreAdmin.UpdateField|FirestoreAdmin.UpdateField} should provide a field mask to avoid\n     * changing any configuration that the caller isn't aware of. The field mask\n     * should be specified as: `{ paths: \"index_config\" }`.\n     *\n     * This call returns a {@link google.longrunning.Operation|google.longrunning.Operation} which may be used to\n     * track the status of the field update. The metadata for\n     * the operation will be the type {@link google.firestore.admin.v1.FieldOperationMetadata|FieldOperationMetadata}.\n     *\n     * To configure the default field settings for the database, use\n     * the special `Field` with resource name:\n     * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.firestore.admin.v1.Field} request.field\n     *   Required. The field to be updated.\n     * @param {google.protobuf.FieldMask} request.updateMask\n     *   A mask, relative to the field. If specified, only configuration specified\n     *   by this field_mask will be updated in the field.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n\n  }, {\n    key: \"updateField\",\n    value: function updateField(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        'field.name': request.field.name || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.updateField(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by the updateField() method.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *\n     * @example:\n     *   const decodedOperation = await checkUpdateFieldProgress(name);\n     *   console.log(decodedOperation.result);\n     *   console.log(decodedOperation.done);\n     *   console.log(decodedOperation.metadata);\n     *\n     */\n\n  }, {\n    key: \"checkUpdateFieldProgress\",\n    value: function () {\n      var _checkUpdateFieldProgress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name) {\n        var request, _yield$this$operation3, _yield$this$operation4, operation, decodeOperation;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n                  name: name\n                });\n                _context2.next = 3;\n                return this.operationsClient.getOperation(request);\n\n              case 3:\n                _yield$this$operation3 = _context2.sent;\n                _yield$this$operation4 = _slicedToArray(_yield$this$operation3, 1);\n                operation = _yield$this$operation4[0];\n                decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.updateField, gax.createDefaultBackoffSettings());\n                return _context2.abrupt(\"return\", decodeOperation);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function checkUpdateFieldProgress(_x2) {\n        return _checkUpdateFieldProgress.apply(this, arguments);\n      }\n\n      return checkUpdateFieldProgress;\n    }()\n    /**\n     * Exports a copy of all or a subset of documents from Google Cloud Firestore\n     * to another storage system, such as Google Cloud Storage. Recent updates to\n     * documents may not be reflected in the export. The export occurs in the\n     * background and its progress can be monitored and managed via the\n     * Operation resource that is created. The output of an export may only be\n     * used once the associated operation is done. If an export operation is\n     * cancelled before completion it may leave partial data behind in Google\n     * Cloud Storage.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. Database to export. Should be of the form:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {string[]} request.collectionIds\n     *   Which collection ids to export. Unspecified means all collections.\n     * @param {string} request.outputUriPrefix\n     *   The output URI. Currently only supports Google Cloud Storage URIs of the\n     *   form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name\n     *   of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional\n     *   Google Cloud Storage namespace path. When\n     *   choosing a name, be sure to consider Google Cloud Storage naming\n     *   guidelines: https://cloud.google.com/storage/docs/naming.\n     *   If the URI is a bucket (without a namespace path), a prefix will be\n     *   generated based on the start time.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n\n  }, {\n    key: \"exportDocuments\",\n    value: function exportDocuments(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        name: request.name || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.exportDocuments(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by the exportDocuments() method.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *\n     * @example:\n     *   const decodedOperation = await checkExportDocumentsProgress(name);\n     *   console.log(decodedOperation.result);\n     *   console.log(decodedOperation.done);\n     *   console.log(decodedOperation.metadata);\n     *\n     */\n\n  }, {\n    key: \"checkExportDocumentsProgress\",\n    value: function () {\n      var _checkExportDocumentsProgress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(name) {\n        var request, _yield$this$operation5, _yield$this$operation6, operation, decodeOperation;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n                  name: name\n                });\n                _context3.next = 3;\n                return this.operationsClient.getOperation(request);\n\n              case 3:\n                _yield$this$operation5 = _context3.sent;\n                _yield$this$operation6 = _slicedToArray(_yield$this$operation5, 1);\n                operation = _yield$this$operation6[0];\n                decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.exportDocuments, gax.createDefaultBackoffSettings());\n                return _context3.abrupt(\"return\", decodeOperation);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function checkExportDocumentsProgress(_x3) {\n        return _checkExportDocumentsProgress.apply(this, arguments);\n      }\n\n      return checkExportDocumentsProgress;\n    }()\n    /**\n     * Imports documents into Google Cloud Firestore. Existing documents with the\n     * same name are overwritten. The import occurs in the background and its\n     * progress can be monitored and managed via the Operation resource that is\n     * created. If an ImportDocuments operation is cancelled, it is possible\n     * that a subset of the data has already been imported to Cloud Firestore.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. Database to import into. Should be of the form:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {string[]} request.collectionIds\n     *   Which collection ids to import. Unspecified means all collections included\n     *   in the import.\n     * @param {string} request.inputUriPrefix\n     *   Location of the exported files.\n     *   This must match the output_uri_prefix of an ExportDocumentsResponse from\n     *   an export that has completed successfully.\n     *   See:\n     *   {@link google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix|google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n\n  }, {\n    key: \"importDocuments\",\n    value: function importDocuments(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        name: request.name || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.importDocuments(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by the importDocuments() method.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *\n     * @example:\n     *   const decodedOperation = await checkImportDocumentsProgress(name);\n     *   console.log(decodedOperation.result);\n     *   console.log(decodedOperation.done);\n     *   console.log(decodedOperation.metadata);\n     *\n     */\n\n  }, {\n    key: \"checkImportDocumentsProgress\",\n    value: function () {\n      var _checkImportDocumentsProgress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(name) {\n        var request, _yield$this$operation7, _yield$this$operation8, operation, decodeOperation;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n                  name: name\n                });\n                _context4.next = 3;\n                return this.operationsClient.getOperation(request);\n\n              case 3:\n                _yield$this$operation7 = _context4.sent;\n                _yield$this$operation8 = _slicedToArray(_yield$this$operation7, 1);\n                operation = _yield$this$operation8[0];\n                decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.importDocuments, gax.createDefaultBackoffSettings());\n                return _context4.abrupt(\"return\", decodeOperation);\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function checkImportDocumentsProgress(_x4) {\n        return _checkImportDocumentsProgress.apply(this, arguments);\n      }\n\n      return checkImportDocumentsProgress;\n    }()\n    /**\n     * Lists composite indexes.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Index]{@link google.firestore.admin.v1.Index}.\n     *   The client library support auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *\n     *   When autoPaginate: false is specified through options, the array has three elements.\n     *   The first element is Array of [Index]{@link google.firestore.admin.v1.Index} that corresponds to\n     *   the one page received from the API server.\n     *   If the second element is not null it contains the request object of type [ListIndexesRequest]{@link google.firestore.admin.v1.ListIndexesRequest}\n     *   that can be used to obtain the next page of the results.\n     *   If it is null, the next page does not exist.\n     *   The third element contains the raw response received from the API server. Its type is\n     *   [ListIndexesResponse]{@link google.firestore.admin.v1.ListIndexesResponse}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n\n  }, {\n    key: \"listIndexes\",\n    value: function listIndexes(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.listIndexes(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listIndexes}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listIndexes} continuously\n     * and invokes the callback registered for 'data' event for each element in the\n     * responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Index]{@link google.firestore.admin.v1.Index} on 'data' event.\n     */\n\n  }, {\n    key: \"listIndexesStream\",\n    value: function listIndexesStream(request, options) {\n      request = request || {};\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      var callSettings = new gax.CallSettings(options);\n      this.initialize();\n      return this.descriptors.page.listIndexes.createStream(this.innerApiCalls.listIndexes, request, callSettings);\n    }\n    /**\n     * Equivalent to {@link listIndexes}, but returns an iterable object.\n     *\n     * for-await-of syntax is used with the iterable to recursively get response element on-demand.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\n     */\n\n  }, {\n    key: \"listIndexesAsync\",\n    value: function listIndexesAsync(request, options) {\n      request = request || {};\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      options = options || {};\n      var callSettings = new gax.CallSettings(options);\n      this.initialize();\n      return this.descriptors.page.listIndexes.asyncIterate(this.innerApiCalls['listIndexes'], request, callSettings);\n    }\n    /**\n     * Lists the field configuration and metadata for this database.\n     *\n     * Currently, {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n     * that have been explicitly overridden. To issue this query, call\n     * {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\n     * `indexConfig.usesAncestorConfig:false`.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results. Currently,\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n     *   that have been explicitly overridden. To issue this query, call\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\n     *   `indexConfig.usesAncestorConfig:false`.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Field]{@link google.firestore.admin.v1.Field}.\n     *   The client library support auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *\n     *   When autoPaginate: false is specified through options, the array has three elements.\n     *   The first element is Array of [Field]{@link google.firestore.admin.v1.Field} that corresponds to\n     *   the one page received from the API server.\n     *   If the second element is not null it contains the request object of type [ListFieldsRequest]{@link google.firestore.admin.v1.ListFieldsRequest}\n     *   that can be used to obtain the next page of the results.\n     *   If it is null, the next page does not exist.\n     *   The third element contains the raw response received from the API server. Its type is\n     *   [ListFieldsResponse]{@link google.firestore.admin.v1.ListFieldsResponse}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n\n  }, {\n    key: \"listFields\",\n    value: function listFields(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.listFields(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listFields}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listFields} continuously\n     * and invokes the callback registered for 'data' event for each element in the\n     * responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results. Currently,\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n     *   that have been explicitly overridden. To issue this query, call\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\n     *   `indexConfig.usesAncestorConfig:false`.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Field]{@link google.firestore.admin.v1.Field} on 'data' event.\n     */\n\n  }, {\n    key: \"listFieldsStream\",\n    value: function listFieldsStream(request, options) {\n      request = request || {};\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      var callSettings = new gax.CallSettings(options);\n      this.initialize();\n      return this.descriptors.page.listFields.createStream(this.innerApiCalls.listFields, request, callSettings);\n    }\n    /**\n     * Equivalent to {@link listFields}, but returns an iterable object.\n     *\n     * for-await-of syntax is used with the iterable to recursively get response element on-demand.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results. Currently,\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n     *   that have been explicitly overridden. To issue this query, call\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\n     *   `indexConfig.usesAncestorConfig:false`.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\n     */\n\n  }, {\n    key: \"listFieldsAsync\",\n    value: function listFieldsAsync(request, options) {\n      request = request || {};\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      options = options || {};\n      var callSettings = new gax.CallSettings(options);\n      this.initialize();\n      return this.descriptors.page.listFields.asyncIterate(this.innerApiCalls['listFields'], request, callSettings);\n    } // --------------------\n    // -- Path templates --\n    // --------------------\n\n    /**\n     * Return a fully-qualified collectionGroup resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @returns {string} Resource name string.\n     */\n\n  }, {\n    key: \"collectionGroupPath\",\n    value: function collectionGroupPath(project, database, collection) {\n      return this.pathTemplates.collectionGroupPathTemplate.render({\n        project: project,\n        database: database,\n        collection: collection\n      });\n    }\n    /**\n     * Parse the project from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the project.\n     */\n\n  }, {\n    key: \"matchProjectFromCollectionGroupName\",\n    value: function matchProjectFromCollectionGroupName(collectionGroupName) {\n      return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).project;\n    }\n    /**\n     * Parse the database from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the database.\n     */\n\n  }, {\n    key: \"matchDatabaseFromCollectionGroupName\",\n    value: function matchDatabaseFromCollectionGroupName(collectionGroupName) {\n      return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).database;\n    }\n    /**\n     * Parse the collection from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the collection.\n     */\n\n  }, {\n    key: \"matchCollectionFromCollectionGroupName\",\n    value: function matchCollectionFromCollectionGroupName(collectionGroupName) {\n      return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).collection;\n    }\n    /**\n     * Return a fully-qualified database resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @returns {string} Resource name string.\n     */\n\n  }, {\n    key: \"databasePath\",\n    value: function databasePath(project, database) {\n      return this.pathTemplates.databasePathTemplate.render({\n        project: project,\n        database: database\n      });\n    }\n    /**\n     * Parse the project from Database resource.\n     *\n     * @param {string} databaseName\n     *   A fully-qualified path representing Database resource.\n     * @returns {string} A string representing the project.\n     */\n\n  }, {\n    key: \"matchProjectFromDatabaseName\",\n    value: function matchProjectFromDatabaseName(databaseName) {\n      return this.pathTemplates.databasePathTemplate.match(databaseName).project;\n    }\n    /**\n     * Parse the database from Database resource.\n     *\n     * @param {string} databaseName\n     *   A fully-qualified path representing Database resource.\n     * @returns {string} A string representing the database.\n     */\n\n  }, {\n    key: \"matchDatabaseFromDatabaseName\",\n    value: function matchDatabaseFromDatabaseName(databaseName) {\n      return this.pathTemplates.databasePathTemplate.match(databaseName).database;\n    }\n    /**\n     * Return a fully-qualified field resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @param {string} field\n     * @returns {string} Resource name string.\n     */\n\n  }, {\n    key: \"fieldPath\",\n    value: function fieldPath(project, database, collection, field) {\n      return this.pathTemplates.fieldPathTemplate.render({\n        project: project,\n        database: database,\n        collection: collection,\n        field: field\n      });\n    }\n    /**\n     * Parse the project from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the project.\n     */\n\n  }, {\n    key: \"matchProjectFromFieldName\",\n    value: function matchProjectFromFieldName(fieldName) {\n      return this.pathTemplates.fieldPathTemplate.match(fieldName).project;\n    }\n    /**\n     * Parse the database from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the database.\n     */\n\n  }, {\n    key: \"matchDatabaseFromFieldName\",\n    value: function matchDatabaseFromFieldName(fieldName) {\n      return this.pathTemplates.fieldPathTemplate.match(fieldName).database;\n    }\n    /**\n     * Parse the collection from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the collection.\n     */\n\n  }, {\n    key: \"matchCollectionFromFieldName\",\n    value: function matchCollectionFromFieldName(fieldName) {\n      return this.pathTemplates.fieldPathTemplate.match(fieldName).collection;\n    }\n    /**\n     * Parse the field from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the field.\n     */\n\n  }, {\n    key: \"matchFieldFromFieldName\",\n    value: function matchFieldFromFieldName(fieldName) {\n      return this.pathTemplates.fieldPathTemplate.match(fieldName).field;\n    }\n    /**\n     * Return a fully-qualified index resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @param {string} index\n     * @returns {string} Resource name string.\n     */\n\n  }, {\n    key: \"indexPath\",\n    value: function indexPath(project, database, collection, index) {\n      return this.pathTemplates.indexPathTemplate.render({\n        project: project,\n        database: database,\n        collection: collection,\n        index: index\n      });\n    }\n    /**\n     * Parse the project from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the project.\n     */\n\n  }, {\n    key: \"matchProjectFromIndexName\",\n    value: function matchProjectFromIndexName(indexName) {\n      return this.pathTemplates.indexPathTemplate.match(indexName).project;\n    }\n    /**\n     * Parse the database from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the database.\n     */\n\n  }, {\n    key: \"matchDatabaseFromIndexName\",\n    value: function matchDatabaseFromIndexName(indexName) {\n      return this.pathTemplates.indexPathTemplate.match(indexName).database;\n    }\n    /**\n     * Parse the collection from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the collection.\n     */\n\n  }, {\n    key: \"matchCollectionFromIndexName\",\n    value: function matchCollectionFromIndexName(indexName) {\n      return this.pathTemplates.indexPathTemplate.match(indexName).collection;\n    }\n    /**\n     * Parse the index from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the index.\n     */\n\n  }, {\n    key: \"matchIndexFromIndexName\",\n    value: function matchIndexFromIndexName(indexName) {\n      return this.pathTemplates.indexPathTemplate.match(indexName).index;\n    }\n    /**\n     * Terminate the GRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this2 = this;\n\n      this.initialize();\n\n      if (!this._terminated) {\n        return this.firestoreAdminStub.then(function (stub) {\n          _this2._terminated = true;\n          stub.close();\n        });\n      }\n\n      return Promise.resolve();\n    }\n  }], [{\n    key: \"servicePath\",\n    get: function get() {\n      return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     */\n\n  }, {\n    key: \"apiEndpoint\",\n    get: function get() {\n      return 'firestore.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     */\n\n  }, {\n    key: \"port\",\n    get: function get() {\n      return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     */\n\n  }, {\n    key: \"scopes\",\n    get: function get() {\n      return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/datastore'];\n    }\n  }]);\n\n  return FirestoreAdminClient;\n}();\n\nexports.FirestoreAdminClient = FirestoreAdminClient;","map":{"version":3,"sources":["D:/medium clone/node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client.js"],"names":["Object","defineProperty","exports","value","gax","require","path","gapicConfig","google_gax_1","version","FirestoreAdminClient","opts","_terminated","descriptors","page","stream","longrunning","batching","staticMembers","constructor","servicePath","apiEndpoint","port","clientConfig","_gaxModule","fallback","scopes","_gaxGrpc","GrpcClient","_opts","auth","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","nodejsProtoPath","join","__dirname","_protos","loadProto","pathTemplates","collectionGroupPathTemplate","PathTemplate","databasePathTemplate","fieldPathTemplate","indexPathTemplate","listIndexes","PageDescriptor","listFields","protoFilesRoot","protobuf","Root","fromJSON","loadSync","operationsClient","lro","grpc","undefined","createIndexResponse","lookup","createIndexMetadata","updateFieldResponse","updateFieldMetadata","exportDocumentsResponse","exportDocumentsMetadata","importDocumentsResponse","importDocumentsMetadata","createIndex","LongrunningDescriptor","decode","bind","updateField","exportDocuments","importDocuments","_defaults","constructSettings","innerApiCalls","firestoreAdminStub","createStub","lookupService","google","firestore","admin","v1","FirestoreAdmin","firestoreAdminStubMethods","methodName","callPromise","then","stub","Promise","reject","func","args","apply","err","apiCall","createApiCall","callback","getProjectId","request","optionsOrCallback","options","otherArgs","headers","routingHeader","fromParams","name","initialize","getIndex","deleteIndex","getField","parent","operationsProtos","GetOperationRequest","getOperation","operation","decodeOperation","Operation","createDefaultBackoffSettings","field","callSettings","CallSettings","createStream","asyncIterate","project","database","collection","render","collectionGroupName","match","databaseName","fieldName","index","indexName","close","resolve"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gax = require(\"google-gax\");\nconst path = require(\"path\");\nconst gapicConfig = require(\"./firestore_admin_client_config.json\");\nconst google_gax_1 = require(\"google-gax\");\nconst version = require('../../../package.json').version;\n/**\n *  Operations are created by service `FirestoreAdmin`, but are accessed via\n *  service `google.longrunning.Operations`.\n * @class\n * @memberof v1\n */\nclass FirestoreAdminClient {\n    /**\n     * Construct an instance of FirestoreAdminClient.\n     *\n     * @param {object} [options] - The configuration object. See the subsequent\n     *   parameters for more details.\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     */\n    constructor(opts) {\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include the service address and port.\n        const staticMembers = this.constructor;\n        const servicePath = opts && opts.servicePath\n            ? opts.servicePath\n            : opts && opts.apiEndpoint\n                ? opts.apiEndpoint\n                : staticMembers.servicePath;\n        const port = opts && opts.port ? opts.port : staticMembers.port;\n        if (!opts) {\n            opts = { servicePath, port };\n        }\n        opts.servicePath = opts.servicePath || servicePath;\n        opts.port = opts.port || port;\n        // users can override the config from client side, like retry codes name.\n        // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/master/src/gax.ts#L546\n        // The way to override client config for Showcase API:\n        //\n        // const customConfig = {\"interfaces\": {\"google.showcase.v1beta1.Echo\": {\"methods\": {\"Echo\": {\"retry_codes_name\": \"idempotent\", \"retry_params_name\": \"default\"}}}}}\n        // const showcaseClient = new showcaseClient({ projectId, customConfig });\n        opts.clientConfig = opts.clientConfig || {};\n        // If we're running in browser, it's OK to omit `fallback` since\n        // google-gax has `browser` field in its `package.json`.\n        // For Electron (which does not respect `browser` field),\n        // pass `{fallback: true}` to the FirestoreAdminClient constructor.\n        this._gaxModule = opts.fallback ? gax.fallback : gax;\n        // Create a `gaxGrpc` object, with any grpc-specific options\n        // sent to the client.\n        opts.scopes = this.constructor.scopes;\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        // For Node.js, pass the path to JSON proto file.\n        // For browsers, pass the JSON content.\n        const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n        this._protos = this._gaxGrpc.loadProto(opts.fallback\n            ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n                require('../../protos/protos.json')\n            : nodejsProtoPath);\n        // This API contains \"path templates\"; forward-slash-separated\n        // identifiers to uniquely identify resources within the API.\n        // Create useful helper objects for these.\n        this.pathTemplates = {\n            collectionGroupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}'),\n            databasePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}'),\n            fieldPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/fields/{field}'),\n            indexPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/indexes/{index}'),\n        };\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listIndexes: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'indexes'),\n            listFields: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'fields'),\n        };\n        // This API contains \"long-running operations\", which return a\n        // an Operation object that allows for tracking of the operation,\n        // rather than holding a request open.\n        const protoFilesRoot = opts.fallback\n            ? this._gaxModule.protobuf.Root.fromJSON(\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\n            require('../../protos/protos.json'))\n            : this._gaxModule.protobuf.loadSync(nodejsProtoPath);\n        this.operationsClient = this._gaxModule\n            .lro({\n            auth: this.auth,\n            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,\n        })\n            .operationsClient(opts);\n        const createIndexResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Index');\n        const createIndexMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.IndexOperationMetadata');\n        const updateFieldResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Field');\n        const updateFieldMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.FieldOperationMetadata');\n        const exportDocumentsResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsResponse');\n        const exportDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsMetadata');\n        const importDocumentsResponse = protoFilesRoot.lookup('.google.protobuf.Empty');\n        const importDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ImportDocumentsMetadata');\n        this.descriptors.longrunning = {\n            createIndex: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createIndexResponse.decode.bind(createIndexResponse), createIndexMetadata.decode.bind(createIndexMetadata)),\n            updateField: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateFieldResponse.decode.bind(updateFieldResponse), updateFieldMetadata.decode.bind(updateFieldMetadata)),\n            exportDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, exportDocumentsResponse.decode.bind(exportDocumentsResponse), exportDocumentsMetadata.decode.bind(exportDocumentsMetadata)),\n            importDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importDocumentsResponse.decode.bind(importDocumentsResponse), importDocumentsMetadata.decode.bind(importDocumentsMetadata)),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.firestore.admin.v1.FirestoreAdmin', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.firestoreAdminStub) {\n            return this.firestoreAdminStub;\n        }\n        // Put together the \"service stub\" for\n        // google.firestore.admin.v1.FirestoreAdmin.\n        this.firestoreAdminStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.firestore.admin.v1.FirestoreAdmin')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.firestore.admin.v1.FirestoreAdmin, this._opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const firestoreAdminStubMethods = [\n            'createIndex',\n            'listIndexes',\n            'getIndex',\n            'deleteIndex',\n            'getField',\n            'updateField',\n            'listFields',\n            'exportDocuments',\n            'importDocuments',\n        ];\n        for (const methodName of firestoreAdminStubMethods) {\n            const callPromise = this.firestoreAdminStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], this.descriptors.page[methodName] ||\n                this.descriptors.stream[methodName] ||\n                this.descriptors.longrunning[methodName]);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.firestoreAdminStub;\n    }\n    /**\n     * The DNS address for this API service.\n     */\n    static get servicePath() {\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     */\n    static get apiEndpoint() {\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/datastore',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @param {function(Error, string)} callback - the callback to\n     *   be called with the current project Id.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Gets a composite index.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. A name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Index]{@link google.firestore.admin.v1.Index}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    getIndex(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.getIndex(request, options, callback);\n    }\n    /**\n     * Deletes a composite index.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. A name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    deleteIndex(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.deleteIndex(request, options, callback);\n    }\n    /**\n     * Gets the metadata and configuration for a Field.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. A name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Field]{@link google.firestore.admin.v1.Field}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    getField(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.getField(request, options, callback);\n    }\n    /**\n     * Creates a composite index. This returns a {@link google.longrunning.Operation|google.longrunning.Operation}\n     * which may be used to track the status of the creation. The metadata for\n     * the operation will be the type {@link google.firestore.admin.v1.IndexOperationMetadata|IndexOperationMetadata}.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {google.firestore.admin.v1.Index} request.index\n     *   Required. The composite index to create.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    createIndex(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.createIndex(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by the createIndex() method.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *\n     * @example:\n     *   const decodedOperation = await checkCreateIndexProgress(name);\n     *   console.log(decodedOperation.result);\n     *   console.log(decodedOperation.done);\n     *   console.log(decodedOperation.metadata);\n     *\n     */\n    async checkCreateIndexProgress(name) {\n        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createIndex, gax.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    /**\n     * Updates a field configuration. Currently, field updates apply only to\n     * single field index configuration. However, calls to\n     * {@link google.firestore.admin.v1.FirestoreAdmin.UpdateField|FirestoreAdmin.UpdateField} should provide a field mask to avoid\n     * changing any configuration that the caller isn't aware of. The field mask\n     * should be specified as: `{ paths: \"index_config\" }`.\n     *\n     * This call returns a {@link google.longrunning.Operation|google.longrunning.Operation} which may be used to\n     * track the status of the field update. The metadata for\n     * the operation will be the type {@link google.firestore.admin.v1.FieldOperationMetadata|FieldOperationMetadata}.\n     *\n     * To configure the default field settings for the database, use\n     * the special `Field` with resource name:\n     * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.firestore.admin.v1.Field} request.field\n     *   Required. The field to be updated.\n     * @param {google.protobuf.FieldMask} request.updateMask\n     *   A mask, relative to the field. If specified, only configuration specified\n     *   by this field_mask will be updated in the field.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    updateField(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            'field.name': request.field.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.updateField(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by the updateField() method.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *\n     * @example:\n     *   const decodedOperation = await checkUpdateFieldProgress(name);\n     *   console.log(decodedOperation.result);\n     *   console.log(decodedOperation.done);\n     *   console.log(decodedOperation.metadata);\n     *\n     */\n    async checkUpdateFieldProgress(name) {\n        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.updateField, gax.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    /**\n     * Exports a copy of all or a subset of documents from Google Cloud Firestore\n     * to another storage system, such as Google Cloud Storage. Recent updates to\n     * documents may not be reflected in the export. The export occurs in the\n     * background and its progress can be monitored and managed via the\n     * Operation resource that is created. The output of an export may only be\n     * used once the associated operation is done. If an export operation is\n     * cancelled before completion it may leave partial data behind in Google\n     * Cloud Storage.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. Database to export. Should be of the form:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {string[]} request.collectionIds\n     *   Which collection ids to export. Unspecified means all collections.\n     * @param {string} request.outputUriPrefix\n     *   The output URI. Currently only supports Google Cloud Storage URIs of the\n     *   form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name\n     *   of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional\n     *   Google Cloud Storage namespace path. When\n     *   choosing a name, be sure to consider Google Cloud Storage naming\n     *   guidelines: https://cloud.google.com/storage/docs/naming.\n     *   If the URI is a bucket (without a namespace path), a prefix will be\n     *   generated based on the start time.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    exportDocuments(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.exportDocuments(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by the exportDocuments() method.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *\n     * @example:\n     *   const decodedOperation = await checkExportDocumentsProgress(name);\n     *   console.log(decodedOperation.result);\n     *   console.log(decodedOperation.done);\n     *   console.log(decodedOperation.metadata);\n     *\n     */\n    async checkExportDocumentsProgress(name) {\n        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.exportDocuments, gax.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    /**\n     * Imports documents into Google Cloud Firestore. Existing documents with the\n     * same name are overwritten. The import occurs in the background and its\n     * progress can be monitored and managed via the Operation resource that is\n     * created. If an ImportDocuments operation is cancelled, it is possible\n     * that a subset of the data has already been imported to Cloud Firestore.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. Database to import into. Should be of the form:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {string[]} request.collectionIds\n     *   Which collection ids to import. Unspecified means all collections included\n     *   in the import.\n     * @param {string} request.inputUriPrefix\n     *   Location of the exported files.\n     *   This must match the output_uri_prefix of an ExportDocumentsResponse from\n     *   an export that has completed successfully.\n     *   See:\n     *   {@link google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix|google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    importDocuments(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.importDocuments(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by the importDocuments() method.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *\n     * @example:\n     *   const decodedOperation = await checkImportDocumentsProgress(name);\n     *   console.log(decodedOperation.result);\n     *   console.log(decodedOperation.done);\n     *   console.log(decodedOperation.metadata);\n     *\n     */\n    async checkImportDocumentsProgress(name) {\n        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.importDocuments, gax.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    /**\n     * Lists composite indexes.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Index]{@link google.firestore.admin.v1.Index}.\n     *   The client library support auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *\n     *   When autoPaginate: false is specified through options, the array has three elements.\n     *   The first element is Array of [Index]{@link google.firestore.admin.v1.Index} that corresponds to\n     *   the one page received from the API server.\n     *   If the second element is not null it contains the request object of type [ListIndexesRequest]{@link google.firestore.admin.v1.ListIndexesRequest}\n     *   that can be used to obtain the next page of the results.\n     *   If it is null, the next page does not exist.\n     *   The third element contains the raw response received from the API server. Its type is\n     *   [ListIndexesResponse]{@link google.firestore.admin.v1.ListIndexesResponse}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    listIndexes(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.listIndexes(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listIndexes}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listIndexes} continuously\n     * and invokes the callback registered for 'data' event for each element in the\n     * responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Index]{@link google.firestore.admin.v1.Index} on 'data' event.\n     */\n    listIndexesStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listIndexes.createStream(this.innerApiCalls.listIndexes, request, callSettings);\n    }\n    /**\n     * Equivalent to {@link listIndexes}, but returns an iterable object.\n     *\n     * for-await-of syntax is used with the iterable to recursively get response element on-demand.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\n     */\n    listIndexesAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listIndexes.asyncIterate(this.innerApiCalls['listIndexes'], request, callSettings);\n    }\n    /**\n     * Lists the field configuration and metadata for this database.\n     *\n     * Currently, {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n     * that have been explicitly overridden. To issue this query, call\n     * {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\n     * `indexConfig.usesAncestorConfig:false`.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results. Currently,\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n     *   that have been explicitly overridden. To issue this query, call\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\n     *   `indexConfig.usesAncestorConfig:false`.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Field]{@link google.firestore.admin.v1.Field}.\n     *   The client library support auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *\n     *   When autoPaginate: false is specified through options, the array has three elements.\n     *   The first element is Array of [Field]{@link google.firestore.admin.v1.Field} that corresponds to\n     *   the one page received from the API server.\n     *   If the second element is not null it contains the request object of type [ListFieldsRequest]{@link google.firestore.admin.v1.ListFieldsRequest}\n     *   that can be used to obtain the next page of the results.\n     *   If it is null, the next page does not exist.\n     *   The third element contains the raw response received from the API server. Its type is\n     *   [ListFieldsResponse]{@link google.firestore.admin.v1.ListFieldsResponse}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    listFields(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.listFields(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listFields}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listFields} continuously\n     * and invokes the callback registered for 'data' event for each element in the\n     * responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results. Currently,\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n     *   that have been explicitly overridden. To issue this query, call\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\n     *   `indexConfig.usesAncestorConfig:false`.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Field]{@link google.firestore.admin.v1.Field} on 'data' event.\n     */\n    listFieldsStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listFields.createStream(this.innerApiCalls.listFields, request, callSettings);\n    }\n    /**\n     * Equivalent to {@link listFields}, but returns an iterable object.\n     *\n     * for-await-of syntax is used with the iterable to recursively get response element on-demand.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results. Currently,\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n     *   that have been explicitly overridden. To issue this query, call\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\n     *   `indexConfig.usesAncestorConfig:false`.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\n     */\n    listFieldsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listFields.asyncIterate(this.innerApiCalls['listFields'], request, callSettings);\n    }\n    // --------------------\n    // -- Path templates --\n    // --------------------\n    /**\n     * Return a fully-qualified collectionGroup resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @returns {string} Resource name string.\n     */\n    collectionGroupPath(project, database, collection) {\n        return this.pathTemplates.collectionGroupPathTemplate.render({\n            project: project,\n            database: database,\n            collection: collection,\n        });\n    }\n    /**\n     * Parse the project from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromCollectionGroupName(collectionGroupName) {\n        return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).project;\n    }\n    /**\n     * Parse the database from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromCollectionGroupName(collectionGroupName) {\n        return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).database;\n    }\n    /**\n     * Parse the collection from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the collection.\n     */\n    matchCollectionFromCollectionGroupName(collectionGroupName) {\n        return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).collection;\n    }\n    /**\n     * Return a fully-qualified database resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @returns {string} Resource name string.\n     */\n    databasePath(project, database) {\n        return this.pathTemplates.databasePathTemplate.render({\n            project: project,\n            database: database,\n        });\n    }\n    /**\n     * Parse the project from Database resource.\n     *\n     * @param {string} databaseName\n     *   A fully-qualified path representing Database resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromDatabaseName(databaseName) {\n        return this.pathTemplates.databasePathTemplate.match(databaseName).project;\n    }\n    /**\n     * Parse the database from Database resource.\n     *\n     * @param {string} databaseName\n     *   A fully-qualified path representing Database resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromDatabaseName(databaseName) {\n        return this.pathTemplates.databasePathTemplate.match(databaseName).database;\n    }\n    /**\n     * Return a fully-qualified field resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @param {string} field\n     * @returns {string} Resource name string.\n     */\n    fieldPath(project, database, collection, field) {\n        return this.pathTemplates.fieldPathTemplate.render({\n            project: project,\n            database: database,\n            collection: collection,\n            field: field,\n        });\n    }\n    /**\n     * Parse the project from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromFieldName(fieldName) {\n        return this.pathTemplates.fieldPathTemplate.match(fieldName).project;\n    }\n    /**\n     * Parse the database from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromFieldName(fieldName) {\n        return this.pathTemplates.fieldPathTemplate.match(fieldName).database;\n    }\n    /**\n     * Parse the collection from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the collection.\n     */\n    matchCollectionFromFieldName(fieldName) {\n        return this.pathTemplates.fieldPathTemplate.match(fieldName).collection;\n    }\n    /**\n     * Parse the field from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the field.\n     */\n    matchFieldFromFieldName(fieldName) {\n        return this.pathTemplates.fieldPathTemplate.match(fieldName).field;\n    }\n    /**\n     * Return a fully-qualified index resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @param {string} index\n     * @returns {string} Resource name string.\n     */\n    indexPath(project, database, collection, index) {\n        return this.pathTemplates.indexPathTemplate.render({\n            project: project,\n            database: database,\n            collection: collection,\n            index: index,\n        });\n    }\n    /**\n     * Parse the project from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromIndexName(indexName) {\n        return this.pathTemplates.indexPathTemplate.match(indexName).project;\n    }\n    /**\n     * Parse the database from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromIndexName(indexName) {\n        return this.pathTemplates.indexPathTemplate.match(indexName).database;\n    }\n    /**\n     * Parse the collection from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the collection.\n     */\n    matchCollectionFromIndexName(indexName) {\n        return this.pathTemplates.indexPathTemplate.match(indexName).collection;\n    }\n    /**\n     * Parse the index from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the index.\n     */\n    matchIndexFromIndexName(indexName) {\n        return this.pathTemplates.indexPathTemplate.match(indexName).index;\n    }\n    /**\n     * Terminate the GRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     */\n    close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.firestoreAdminStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.FirestoreAdminClient = FirestoreAdminClient;\n//# sourceMappingURL=firestore_admin_client.js.map"]},"metadata":{},"sourceType":"script"}