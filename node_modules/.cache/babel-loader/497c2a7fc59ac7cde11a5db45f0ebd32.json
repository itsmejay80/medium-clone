{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"D:\\\\medium clone\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:\\\\medium clone\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _slicedToArray = require(\"D:\\\\medium clone\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"D:\\\\medium clone\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\medium clone\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"D:\\\\medium clone\\\\node_modules\\\\@babel\\\\runtime/helpers/assertThisInitialized\");\n\nvar _get = require(\"D:\\\\medium clone\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"D:\\\\medium clone\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"D:\\\\medium clone\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:\\\\medium clone\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bucket = exports.BucketActionToHTTPMethod = void 0;\n\nvar common_1 = require(\"@google-cloud/common\");\n\nvar paginator_1 = require(\"@google-cloud/paginator\");\n\nvar promisify_1 = require(\"@google-cloud/promisify\");\n\nvar arrify = require(\"arrify\");\n\nvar extend = require(\"extend\");\n\nvar fs = require(\"fs\");\n\nvar mime = require(\"mime-types\");\n\nvar path = require(\"path\");\n\nvar pLimit = require(\"p-limit\");\n\nvar util_1 = require(\"util\"); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\nvar snakeize = require('snakeize');\n\nvar acl_1 = require(\"./acl\");\n\nvar file_1 = require(\"./file\");\n\nvar iam_1 = require(\"./iam\");\n\nvar notification_1 = require(\"./notification\");\n\nvar signer_1 = require(\"./signer\");\n\nvar BucketActionToHTTPMethod;\n\n(function (BucketActionToHTTPMethod) {\n  BucketActionToHTTPMethod[\"list\"] = \"GET\";\n})(BucketActionToHTTPMethod = exports.BucketActionToHTTPMethod || (exports.BucketActionToHTTPMethod = {}));\n/**\n * The size of a file (in bytes) must be greater than this number to\n * automatically trigger a resumable upload.\n *\n * @const {number}\n * @private\n */\n\n\nvar RESUMABLE_THRESHOLD = 5000000;\n/**\n * Create a Bucket object to interact with a Cloud Storage bucket.\n *\n * @class\n * @hideconstructor\n *\n * @param {Storage} storage A {@link Storage} instance.\n * @param {string} name The name of the bucket.\n * @param {object} [options] Configuration object.\n * @param {string} [options.userProject] User project.\n *\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('albums');\n */\n\nvar Bucket = /*#__PURE__*/function (_common_1$ServiceObje) {\n  _inherits(Bucket, _common_1$ServiceObje);\n\n  var _super = _createSuper(Bucket);\n\n  function Bucket(storage, name, options) {\n    var _this;\n\n    _classCallCheck(this, Bucket);\n\n    options = options || {}; // Allow for \"gs://\"-style input, and strip any trailing slashes.\n\n    name = name.replace(/^gs:\\/\\//, '').replace(/\\/+$/, '');\n    var requestQueryObject = {};\n    var userProject = options.userProject;\n\n    if (typeof userProject === 'string') {\n      requestQueryObject.userProject = userProject;\n    }\n\n    var methods = {\n      /**\n       * Create a bucket.\n       *\n       * @method Bucket#create\n       * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\n       * @param {CreateBucketCallback} [callback] Callback function.\n       * @returns {Promise<CreateBucketResponse>}\n       *\n       * @example\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const bucket = storage.bucket('albums');\n       * bucket.create(function(err, bucket, apiResponse) {\n       *   if (!err) {\n       *     // The bucket was created successfully.\n       *   }\n       * });\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * bucket.create().then(function(data) {\n       *   const bucket = data[0];\n       *   const apiResponse = data[1];\n       * });\n       */\n      create: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n\n      /**\n       * @typedef {object} DeleteBucketOptions Configuration options.\n       * @param {string} [userProject] The ID of the project which will be\n       *     billed for the request.\n       */\n\n      /**\n       * @typedef {array} DeleteBucketResponse\n       * @property {object} 0 The full API response.\n       */\n\n      /**\n       * @callback DeleteBucketCallback\n       * @param {?Error} err Request error, if any.\n       * @param {object} apiResponse The full API response.\n       */\n\n      /**\n       * Delete the bucket.\n       *\n       * @see [Buckets: delete API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/delete}\n       *\n       * @method Bucket#delete\n       * @param {DeleteBucketOptions} [options] Configuration options.\n       * @param {DeleteBucketCallback} [callback] Callback function.\n       * @returns {Promise<DeleteBucketResponse>}\n       *\n       * @example\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const bucket = storage.bucket('albums');\n       * bucket.delete(function(err, apiResponse) {});\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * bucket.delete().then(function(data) {\n       *   const apiResponse = data[0];\n       * });\n       *\n       * @example <caption>include:samples/buckets.js</caption>\n       * region_tag:storage_delete_bucket\n       * Another example:\n       */\n      delete: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n\n      /**\n       * @typedef {object} BucketExistsOptions Configuration options for Bucket#exists().\n       * @param {string} [userProject] The ID of the project which will be\n       *     billed for the request.\n       */\n\n      /**\n       * @typedef {array} BucketExistsResponse\n       * @property {boolean} 0 Whether the {@link Bucket} exists.\n       */\n\n      /**\n       * @callback BucketExistsCallback\n       * @param {?Error} err Request error, if any.\n       * @param {boolean} exists Whether the {@link Bucket} exists.\n       */\n\n      /**\n       * Check if the bucket exists.\n       *\n       * @method Bucket#exists\n       * @param {BucketExistsOptions} [options] Configuration options.\n       * @param {BucketExistsCallback} [callback] Callback function.\n       * @returns {Promise<BucketExistsResponse>}\n       *\n       * @example\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const bucket = storage.bucket('albums');\n       *\n       * bucket.exists(function(err, exists) {});\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * bucket.exists().then(function(data) {\n       *   const exists = data[0];\n       * });\n       */\n      exists: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n\n      /**\n       * @typedef {object} [GetBucketOptions] Configuration options for Bucket#get()\n       * @property {boolean} [autoCreate] Automatically create the object if\n       *     it does not exist. Default: `false`\n       * @property {string} [userProject] The ID of the project which will be\n       *     billed for the request.\n       */\n\n      /**\n       * @typedef {array} GetBucketResponse\n       * @property {Bucket} 0 The {@link Bucket}.\n       * @property {object} 1 The full API response.\n       */\n\n      /**\n       * @callback GetBucketCallback\n       * @param {?Error} err Request error, if any.\n       * @param {Bucket} bucket The {@link Bucket}.\n       * @param {object} apiResponse The full API response.\n       */\n\n      /**\n       * Get a bucket if it exists.\n       *\n       * You may optionally use this to \"get or create\" an object by providing\n       * an object with `autoCreate` set to `true`. Any extra configuration that\n       * is normally required for the `create` method must be contained within\n       * this object as well.\n       *\n       * @method Bucket#get\n       * @param {GetBucketOptions} [options] Configuration options.\n       * @param {GetBucketCallback} [callback] Callback function.\n       * @returns {Promise<GetBucketResponse>}\n       *\n       * @example\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const bucket = storage.bucket('albums');\n       *\n       * bucket.get(function(err, bucket, apiResponse) {\n       *   // `bucket.metadata` has been populated.\n       * });\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * bucket.get().then(function(data) {\n       *   const bucket = data[0];\n       *   const apiResponse = data[1];\n       * });\n       */\n      get: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n\n      /**\n       * @typedef {array} GetBucketMetadataResponse\n       * @property {object} 0 The bucket metadata.\n       * @property {object} 1 The full API response.\n       */\n\n      /**\n       * @callback GetBucketMetadataCallback\n       * @param {?Error} err Request error, if any.\n       * @param {object} metadata The bucket metadata.\n       * @param {object} apiResponse The full API response.\n       */\n\n      /**\n       * @typedef {object} GetBucketMetadataOptions Configuration options for Bucket#getMetadata().\n       * @property {string} [userProject] The ID of the project which will be\n       *     billed for the request.\n       */\n\n      /**\n       * Get the bucket's metadata.\n       *\n       * To set metadata, see {@link Bucket#setMetadata}.\n       *\n       * @see [Buckets: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/get}\n       *\n       * @method Bucket#getMetadata\n       * @param {GetBucketMetadataOptions} [options] Configuration options.\n       * @param {GetBucketMetadataCallback} [callback] Callback function.\n       * @returns {Promise<GetBucketMetadataResponse>}\n       *\n       * @example\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const bucket = storage.bucket('albums');\n       *\n       * bucket.getMetadata(function(err, metadata, apiResponse) {});\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * bucket.getMetadata().then(function(data) {\n       *   const metadata = data[0];\n       *   const apiResponse = data[1];\n       * });\n       *\n       * @example <caption>include:samples/requesterPays.js</caption>\n       * region_tag:storage_get_requester_pays_status\n       * Example of retrieving the requester pays status of a bucket:\n       */\n      getMetadata: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n\n      /**\n       * @typedef {object} SetBucketMetadataOptions Configuration options for Bucket#setMetadata().\n       * @property {string} [userProject] The ID of the project which will be\n       *     billed for the request.\n       */\n\n      /**\n       * @typedef {array} SetBucketMetadataResponse\n       * @property {object} apiResponse The full API response.\n       */\n\n      /**\n       * @callback SetBucketMetadataCallback\n       * @param {?Error} err Request error, if any.\n       * @param {object} metadata The bucket metadata.\n       */\n\n      /**\n       * Set the bucket's metadata.\n       *\n       * @see [Buckets: patch API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch}\n       *\n       * @method Bucket#setMetadata\n       * @param {object<string, *>} metadata The metadata you wish to set.\n       * @param {SetBucketMetadataOptions} [options] Configuration options.\n       * @param {SetBucketMetadataCallback} [callback] Callback function.\n       * @returns {Promise<SetBucketMetadataResponse>}\n       *\n       * @example\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const bucket = storage.bucket('albums');\n       *\n       * //-\n       * // Set website metadata field on the bucket.\n       * //-\n       * const metadata = {\n       *   website: {\n       *     mainPageSuffix: 'http://example.com',\n       *     notFoundPage: 'http://example.com/404.html'\n       *   }\n       * };\n       *\n       * bucket.setMetadata(metadata, function(err, apiResponse) {});\n       *\n       * //-\n       * // Enable versioning for your bucket.\n       * //-\n       * bucket.setMetadata({\n       *   versioning: {\n       *     enabled: true\n       *   }\n       * }, function(err, apiResponse) {});\n       *\n       * //-\n       * // Enable KMS encryption for objects within this bucket.\n       * //-\n       * bucket.setMetadata({\n       *   encryption: {\n       *     defaultKmsKeyName: 'projects/grape-spaceship-123/...'\n       *   }\n       * }, function(err, apiResponse) {});\n       *\n       * //-\n       * // Set the default event-based hold value for new objects in this\n       * // bucket.\n       * //-\n       * bucket.setMetadata({\n       *   defaultEventBasedHold: true\n       * }, function(err, apiResponse) {});\n       *\n       * //-\n       * // Remove object lifecycle rules.\n       * //-\n       * bucket.setMetadata({\n       *   lifecycle: null\n       * }, function(err, apiResponse) {});\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * bucket.setMetadata(metadata).then(function(data) {\n       *   const apiResponse = data[0];\n       * });\n       */\n      setMetadata: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      }\n    };\n    _this = _super.call(this, {\n      parent: storage,\n      baseUrl: '/b',\n      id: name,\n      createMethod: storage.createBucket.bind(storage),\n      methods: methods\n    });\n    _this.name = name;\n    _this.storage = storage;\n    _this.userProject = options.userProject;\n    _this.acl = new acl_1.Acl({\n      request: _this.request.bind(_assertThisInitialized(_this)),\n      pathPrefix: '/acl'\n    });\n    _this.acl.default = new acl_1.Acl({\n      request: _this.request.bind(_assertThisInitialized(_this)),\n      pathPrefix: '/defaultObjectAcl'\n    });\n    _this.iam = new iam_1.Iam(_assertThisInitialized(_this));\n    _this.getFilesStream = paginator_1.paginator.streamify('getFiles');\n    return _this;\n  }\n  /**\n   * @typedef {object} AddLifecycleRuleOptions Configuration options for Bucket#addLifecycleRule().\n   * @property {string} [append=true] The new rules will be appended to any\n   *     pre-existing rules.\n   */\n\n  /**\n   * Add an object lifecycle management rule to the bucket.\n   *\n   * By default, an Object Lifecycle Management rule provided to this method\n   * will be included to the existing policy. To replace all existing rules,\n   * supply the `options` argument, setting `append` to `false`.\n   *\n   * @see [Object Lifecycle Management]{@link https://cloud.google.com/storage/docs/lifecycle}\n   * @see [Buckets: patch API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch}\n   *\n   * @param {LifecycleRule} rule The new lifecycle rule to be added to objects\n   *     in this bucket.\n   * @param {string} [rule.storageClass] When using the `setStorageClass`\n   *     action, provide this option to dictate which storage class the object\n   *     should update to.\n   * @param {AddLifecycleRuleOptions} [options] Configuration object.\n   * @param {boolean} [options.append=true] Append the new rule to the existing\n   *     policy.\n   * @param {SetBucketMetadataCallback} [callback] Callback function.\n   * @returns {Promise<SetBucketMetadataResponse>}\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * //-\n   * // Automatically have an object deleted from this bucket once it is 3 years\n   * // of age.\n   * //-\n   * bucket.addLifecycleRule({\n   *   action: 'delete',\n   *   condition: {\n   *     age: 365 * 3 // Specified in days.\n   *   }\n   * }, function(err, apiResponse) {\n   *   if (err) {\n   *     // Error handling omitted.\n   *   }\n   *\n   *   const lifecycleRules = bucket.metadata.lifecycle.rule;\n   *\n   *   // Iterate over the Object Lifecycle Management rules on this bucket.\n   *   lifecycleRules.forEach(lifecycleRule => {});\n   * });\n   *\n   * //-\n   * // By default, the rule you provide will be added to the existing policy.\n   * // Optionally, you can disable this behavior to replace all of the\n   * // pre-existing rules.\n   * //-\n   * const options = {\n   *   append: false\n   * };\n   *\n   * bucket.addLifecycleRule({\n   *   action: 'delete',\n   *   condition: {\n   *     age: 365 * 3 // Specified in days.\n   *   }\n   * }, options, function(err, apiResponse) {\n   *   if (err) {\n   *     // Error handling omitted.\n   *   }\n   *\n   *   // All rules have been replaced with the new \"delete\" rule.\n   *\n   *   // Iterate over the Object Lifecycle Management rules on this bucket.\n   *   lifecycleRules.forEach(lifecycleRule => {});\n   * });\n   *\n   * //-\n   * // For objects created before 2018, \"downgrade\" the storage class.\n   * //-\n   * bucket.addLifecycleRule({\n   *   action: 'setStorageClass',\n   *   storageClass: 'COLDLINE',\n   *   condition: {\n   *     createdBefore: new Date('2018')\n   *   }\n   * }, function(err, apiResponse) {});\n   *\n   * //-\n   * // Delete objects created before 2016 which have the Coldline storage\n   * // class.\n   * //-\n   * bucket.addLifecycleRule({\n   *   action: 'delete',\n   *   condition: {\n   *     matchesStorageClass: [\n   *       'COLDLINE'\n   *     ],\n   *     createdBefore: new Date('2016')\n   *   }\n   * }, function(err, apiResponse) {});\n   */\n\n\n  _createClass(Bucket, [{\n    key: \"addLifecycleRule\",\n    value: function addLifecycleRule(rule, optionsOrCallback, callback) {\n      var _this2 = this;\n\n      var options;\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n      } else if (optionsOrCallback) {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      callback = callback || common_1.util.noop;\n      var newLifecycleRules = arrify(rule).map(function (rule) {\n        if (typeof rule.action === 'object') {\n          // This is a raw-formatted rule object, the way the API expects.\n          // Just pass it through as-is.\n          return rule;\n        }\n\n        var apiFormattedRule = {};\n        apiFormattedRule.condition = {};\n        apiFormattedRule.action = {\n          type: rule.action\n        }; // @TODO: Remove if the API becomes less picky.\n\n        if (rule.action === 'delete') {\n          apiFormattedRule.action.type = 'Delete';\n        }\n\n        if (rule.storageClass) {\n          apiFormattedRule.action.storageClass = rule.storageClass;\n        }\n\n        for (var condition in rule.condition) {\n          if (rule.condition[condition] instanceof Date) {\n            apiFormattedRule.condition[condition] = rule.condition[condition].toISOString().replace(/T.+$/, '');\n          } else {\n            apiFormattedRule.condition[condition] = rule.condition[condition];\n          }\n        }\n\n        return apiFormattedRule;\n      });\n\n      if (options.append === false) {\n        this.setMetadata({\n          lifecycle: {\n            rule: newLifecycleRules\n          }\n        }, callback);\n        return;\n      } // The default behavior appends the previously-defined lifecycle rules with\n      // the new ones just passed in by the user.\n\n\n      this.getMetadata(function (err, metadata) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        var currentLifecycleRules = arrify(metadata.lifecycle && metadata.lifecycle.rule);\n\n        _this2.setMetadata({\n          lifecycle: {\n            rule: currentLifecycleRules.concat(newLifecycleRules)\n          }\n        }, callback);\n      });\n    }\n    /**\n     * @typedef {object} CombineOptions\n     * @property {string} [kmsKeyName] Resource name of the Cloud KMS key, of\n     *     the form\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,\n     *     that will be used to encrypt the object. Overwrites the object\n     * metadata's `kms_key_name` value, if any.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n\n    /**\n     * @callback CombineCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File} newFile The new {@link File}.\n     * @param {object} apiResponse The full API response.\n     */\n\n    /**\n     * @typedef {array} CombineResponse\n     * @property {File} 0 The new {@link File}.\n     * @property {object} 1 The full API response.\n     */\n\n    /**\n     * Combine multiple files into one new file.\n     *\n     * @see [Objects: compose API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objects/compose}\n     *\n     * @throws {Error} if a non-array is provided as sources argument.\n     * @throws {Error} if no sources are provided.\n     * @throws {Error} if no destination is provided.\n     *\n     * @param {string[]|File[]} sources The source files that will be\n     *     combined.\n     * @param {string|File} destination The file you would like the\n     *     source files combined into.\n     * @param {CombineOptions} [options] Configuration options.\n     * @param {CombineCallback} [callback] Callback function.\n     * @returns {Promise<CombineResponse>}\n     *\n     * @example\n     * const logBucket = storage.bucket('log-bucket');\n     *\n     * const sources = [\n     *   logBucket.file('2013-logs.txt'),\n     *   logBucket.file('2014-logs.txt')\n     * ];\n     *\n     * const allLogs = logBucket.file('all-logs.txt');\n     *\n     * logBucket.combine(sources, allLogs, function(err, newFile, apiResponse) {\n     *   // newFile === allLogs\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * logBucket.combine(sources, allLogs).then(function(data) {\n     *   const newFile = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n\n  }, {\n    key: \"combine\",\n    value: function combine(sources, destination, optionsOrCallback, callback) {\n      var _this3 = this;\n\n      if (!Array.isArray(sources) || sources.length === 0) {\n        throw new Error('You must provide at least one source file.');\n      }\n\n      if (!destination) {\n        throw new Error('A destination file must be specified.');\n      }\n\n      var options = {};\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n      } else if (optionsOrCallback) {\n        options = optionsOrCallback;\n      }\n\n      var convertToFile = function convertToFile(file) {\n        if (file instanceof file_1.File) {\n          return file;\n        }\n\n        return _this3.file(file);\n      }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n      sources = sources.map(convertToFile);\n      var destinationFile = convertToFile(destination);\n      callback = callback || common_1.util.noop;\n\n      if (!destinationFile.metadata.contentType) {\n        var destinationContentType = mime.contentType(destinationFile.name);\n\n        if (destinationContentType) {\n          destinationFile.metadata.contentType = destinationContentType;\n        }\n      } // Make the request from the destination File object.\n\n\n      destinationFile.request({\n        method: 'POST',\n        uri: '/compose',\n        json: {\n          destination: {\n            contentType: destinationFile.metadata.contentType\n          },\n          sourceObjects: sources.map(function (source) {\n            var sourceObject = {\n              name: source.name\n            };\n\n            if (source.metadata && source.metadata.generation) {\n              sourceObject.generation = source.metadata.generation;\n            }\n\n            return sourceObject;\n          })\n        },\n        qs: options\n      }, function (err, resp) {\n        if (err) {\n          callback(err, null, resp);\n          return;\n        }\n\n        callback(null, destinationFile, resp);\n      });\n    }\n    /**\n     * See a [Objects:\n     * watchAll request\n     * body](https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll).\n     *\n     * @typedef {object} CreateChannelConfig\n     * @property {string} address The address where notifications are\n     *     delivered for this channel.\n     * @extends WatchAllOptions\n     */\n\n    /**\n     * @typedef {object} CreateChannelOptions\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n\n    /**\n     * @typedef {array} CreateChannelResponse\n     * @property {Channel} 0 The new {@link Channel}.\n     * @property {object} 1 The full API response.\n     */\n\n    /**\n     * @callback CreateChannelCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Channel} channel The new {@link Channel}.\n     * @param {object} apiResponse The full API response.\n     */\n\n    /**\n     * Create a channel that will be notified when objects in this bucket changes.\n     *\n     * @throws {Error} If an ID is not provided.\n     * @throws {Error} If an address is not provided.\n     *\n     * @see [Objects: watchAll API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll}\n     *\n     * @param {string} id The ID of the channel to create.\n     * @param {CreateChannelConfig} config Configuration for creating channel.\n     * @param {CreateChannelOptions} [options] Configuration options.\n     * @param {CreateChannelCallback} [callback] Callback function.\n     * @returns {Promise<CreateChannelResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     * const id = 'new-channel-id';\n     *\n     * const config = {\n     *   address: 'https://...'\n     * };\n     *\n     * bucket.createChannel(id, config, function(err, channel, apiResponse) {\n     *   if (!err) {\n     *     // Channel created successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.createChannel(id, config).then(function(data) {\n     *   const channel = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n\n  }, {\n    key: \"createChannel\",\n    value: function createChannel(id, config, optionsOrCallback, callback) {\n      var _this4 = this;\n\n      if (typeof id !== 'string') {\n        throw new Error('An ID is required to create a channel.');\n      }\n\n      if (typeof config.address !== 'string') {\n        throw new Error('An address is required to create a channel.');\n      }\n\n      var options = {};\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n      } else if (optionsOrCallback) {\n        options = optionsOrCallback;\n      }\n\n      this.request({\n        method: 'POST',\n        uri: '/o/watch',\n        json: Object.assign({\n          id: id,\n          type: 'web_hook'\n        }, config),\n        qs: options\n      }, function (err, apiResponse) {\n        if (err) {\n          callback(err, null, apiResponse);\n          return;\n        }\n\n        var resourceId = apiResponse.resourceId;\n\n        var channel = _this4.storage.channel(id, resourceId);\n\n        channel.metadata = apiResponse;\n        callback(null, channel, apiResponse);\n      });\n    }\n    /**\n     * Metadata to set for the Notification.\n     *\n     * @typedef {object} CreateNotificationOptions\n     * @property {object} [customAttributes] An optional list of additional\n     *     attributes to attach to each Cloud PubSub message published for this\n     *     notification subscription.\n     * @property {string[]} [eventTypes] If present, only send notifications about\n     *     listed event types. If empty, sent notifications for all event types.\n     * @property {string} [objectNamePrefix] If present, only apply this\n     *     notification configuration to object names that begin with this prefix.\n     * @property {string} [payloadFormat] The desired content of the Payload.\n     *     Defaults to `JSON_API_V1`.\n     *\n     *     Acceptable values are:\n     *     - `JSON_API_V1`\n     *\n     *     - `NONE`\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n\n    /**\n     * @callback CreateNotificationCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Notification} notification The new {@link Notification}.\n     * @param {object} apiResponse The full API response.\n     */\n\n    /**\n     * @typedef {array} CreateNotificationResponse\n     * @property {Notification} 0 The new {@link Notification}.\n     * @property {object} 1 The full API response.\n     */\n\n    /**\n     * Creates a notification subscription for the bucket.\n     *\n     * @see [Notifications: insert]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert}\n     *\n     * @param {Topic|string} topic The Cloud PubSub topic to which this\n     *     subscription publishes. If the project ID is omitted, the current\n     * project ID will be used.\n     *\n     *     Acceptable formats are:\n     *     - `projects/grape-spaceship-123/topics/my-topic`\n     *\n     *     - `my-topic`\n     * @param {CreateNotificationOptions} [options] Metadata to set for the\n     *     notification.\n     * @param {CreateNotificationCallback} [callback] Callback function.\n     * @returns {Promise<CreateNotificationResponse>}\n     * @throws {Error} If a valid topic is not provided.\n     * @see Notification#create\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const callback = function(err, notification, apiResponse) {\n     *   if (!err) {\n     *     // The notification was created successfully.\n     *   }\n     * };\n     *\n     * myBucket.createNotification('my-topic', callback);\n     *\n     * //-\n     * // Configure the nofiication by providing Notification metadata.\n     * //-\n     * const metadata = {\n     *   objectNamePrefix: 'prefix-'\n     * };\n     *\n     * myBucket.createNotification('my-topic', metadata, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myBucket.createNotification('my-topic').then(function(data) {\n     *   const notification = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * @example <caption>include:samples/notifications.js</caption>\n     * region_tag:storage_create_notification\n     * Another example:\n     */\n\n  }, {\n    key: \"createNotification\",\n    value: function createNotification(topic, optionsOrCallback, callback) {\n      var _this5 = this;\n\n      var options = {};\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n      } else if (optionsOrCallback) {\n        options = optionsOrCallback;\n      }\n\n      var topicIsObject = topic !== null && typeof topic === 'object';\n\n      if (topicIsObject && common_1.util.isCustomType(topic, 'pubsub/topic')) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        topic = topic.name;\n      }\n\n      if (typeof topic !== 'string') {\n        throw new Error('A valid topic name is required.');\n      }\n\n      var body = Object.assign({\n        topic: topic\n      }, options);\n\n      if (body.topic.indexOf('projects') !== 0) {\n        body.topic = 'projects/{{projectId}}/topics/' + body.topic;\n      }\n\n      body.topic = '//pubsub.googleapis.com/' + body.topic;\n\n      if (!body.payloadFormat) {\n        body.payloadFormat = 'JSON_API_V1';\n      }\n\n      var query = {};\n\n      if (body.userProject) {\n        query.userProject = body.userProject;\n        delete body.userProject;\n      }\n\n      this.request({\n        method: 'POST',\n        uri: '/notificationConfigs',\n        json: snakeize(body),\n        qs: query\n      }, function (err, apiResponse) {\n        if (err) {\n          callback(err, null, apiResponse);\n          return;\n        }\n\n        var notification = _this5.notification(apiResponse.id);\n\n        notification.metadata = apiResponse;\n        callback(null, notification, apiResponse);\n      });\n    }\n    /**\n     * @typedef {object} DeleteFilesOptions Query object. See {@link Bucket#getFiles}\n     *     for all of the supported properties.\n     * @property {boolean} [force] Suppress errors until all files have been\n     *     processed.\n     */\n\n    /**\n     * @callback DeleteFilesCallback\n     * @param {?Error|?Error[]} err Request error, if any, or array of errors from\n     *     files that were not able to be deleted.\n     * @param {object} [apiResponse] The full API response.\n     */\n\n    /**\n     * Iterate over the bucket's files, calling `file.delete()` on each.\n     *\n     * <strong>This is not an atomic request.</strong> A delete attempt will be\n     * made for each file individually. Any one can fail, in which case only a\n     * portion of the files you intended to be deleted would have.\n     *\n     * Operations are performed in parallel, up to 10 at once. The first error\n     * breaks the loop and will execute the provided callback with it. Specify\n     * `{ force: true }` to suppress the errors until all files have had a chance\n     * to be processed.\n     *\n     * The `query` object passed as the first argument will also be passed to\n     * {@link Bucket#getFiles}.\n     *\n     * @see [Objects: delete API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objects/delete}\n     *\n     * @param {DeleteFilesOptions} [query] Query object. See {@link Bucket#getFiles}\n     * @param {DeleteFilesCallback} [callback] Callback function.\n     * @returns {Promise}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Delete all of the files in the bucket.\n     * //-\n     * bucket.deleteFiles(function(err) {});\n     *\n     * //-\n     * // By default, if a file cannot be deleted, this method will stop deleting\n     * // files from your bucket. You can override this setting with `force:\n     * // true`.\n     * //-\n     * bucket.deleteFiles({\n     *   force: true\n     * }, function(errors) {\n     *   // `errors`:\n     *   //    Array of errors if any occurred, otherwise null.\n     * });\n     *\n     * //-\n     * // The first argument to this method acts as a query to\n     * // {@link Bucket#getFiles}. As an example, you can delete files\n     * // which match a prefix.\n     * //-\n     * bucket.deleteFiles({\n     *   prefix: 'images/'\n     * }, function(err) {\n     *   if (!err) {\n     *     // All files in the `images` directory have been deleted.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.deleteFiles().then(function() {});\n     */\n\n  }, {\n    key: \"deleteFiles\",\n    value: function deleteFiles(queryOrCallback, callback) {\n      var query = {};\n\n      if (typeof queryOrCallback === 'function') {\n        callback = queryOrCallback;\n      } else if (queryOrCallback) {\n        query = queryOrCallback;\n      }\n\n      var MAX_PARALLEL_LIMIT = 10;\n      var errors = [];\n\n      var deleteFile = function deleteFile(file) {\n        return file.delete(query).catch(function (err) {\n          if (!query.force) {\n            throw err;\n          }\n\n          errors.push(err);\n        });\n      };\n\n      this.getFiles(query).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            files = _ref2[0];\n\n        var limit = pLimit(MAX_PARALLEL_LIMIT);\n        var promises = files.map(function (file) {\n          return limit(function () {\n            return deleteFile(file);\n          });\n        });\n        return Promise.all(promises);\n      }).then(function () {\n        return callback(errors.length > 0 ? errors : null);\n      }, callback);\n    }\n    /**\n     * @typedef {array} DeleteLabelsResponse\n     * @property {object} 0 The full API response.\n     */\n\n    /**\n     * @callback DeleteLabelsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} metadata Bucket's metadata.\n     */\n\n    /**\n     * Delete one or more labels from this bucket.\n     *\n     * @param {string|string[]} labels The labels to delete. If no labels are\n     *     provided, all of the labels are removed.\n     * @param {DeleteLabelsCallback} [callback] Callback function.\n     * @returns {Promise<DeleteLabelsResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Delete all of the labels from this bucket.\n     * //-\n     * bucket.deleteLabels(function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete a single label.\n     * //-\n     * bucket.deleteLabels('labelone', function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete a specific set of labels.\n     * //-\n     * bucket.deleteLabels([\n     *   'labelone',\n     *   'labeltwo'\n     * ], function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.deleteLabels().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     */\n\n  }, {\n    key: \"deleteLabels\",\n    value: function deleteLabels(labelsOrCallback, callback) {\n      var _this6 = this;\n\n      var labels = new Array();\n\n      if (typeof labelsOrCallback === 'function') {\n        callback = labelsOrCallback;\n      } else if (labelsOrCallback) {\n        labels = arrify(labelsOrCallback);\n      }\n\n      var deleteLabels = function deleteLabels(labels) {\n        var nullLabelMap = labels.reduce(function (nullLabelMap, labelKey) {\n          nullLabelMap[labelKey] = null;\n          return nullLabelMap;\n        }, {});\n\n        _this6.setLabels(nullLabelMap, callback);\n      };\n\n      if (labels.length === 0) {\n        this.getLabels(function (err, labels) {\n          if (err) {\n            callback(err);\n            return;\n          }\n\n          deleteLabels(Object.keys(labels));\n        });\n      } else {\n        deleteLabels(labels);\n      }\n    }\n    /**\n     * @typedef {array} DisableRequesterPaysResponse\n     * @property {object} 0 The full API response.\n     */\n\n    /**\n     * @callback DisableRequesterPaysCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n\n    /**\n     * <div class=\"notice\">\n     *   <strong>Early Access Testers Only</strong>\n     *   <p>\n     *     This feature is not yet widely-available.\n     *   </p>\n     * </div>\n     *\n     * Disable `requesterPays` functionality from this bucket.\n     *\n     * @param {DisableRequesterPaysCallback} [callback] Callback function.\n     * @returns {Promise<DisableRequesterPaysCallback>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.disableRequesterPays(function(err, apiResponse) {\n     *   if (!err) {\n     *     // requesterPays functionality disabled successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.disableRequesterPays().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     *\n     * @example <caption>include:samples/requesterPays.js</caption>\n     * region_tag:storage_disable_requester_pays\n     * Example of disabling requester pays:\n     */\n\n  }, {\n    key: \"disableRequesterPays\",\n    value: function disableRequesterPays(callback) {\n      this.setMetadata({\n        billing: {\n          requesterPays: false\n        }\n      }, callback || common_1.util.noop);\n    }\n    /**\n     * Configuration object for enabling logging.\n     *\n     * @typedef {object} EnableLoggingOptions\n     * @property {string|Bucket} [bucket] The bucket for the log entries. By\n     *     default, the current bucket is used.\n     * @property {string} prefix A unique prefix for log object names.\n     */\n\n    /**\n     * Enable logging functionality for this bucket. This will make two API\n     * requests, first to grant Cloud Storage WRITE permission to the bucket, then\n     * to set the appropriate configuration on the Bucket's metadata.\n     *\n     * @param {EnableLoggingOptions} config Configuration options.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * const config = {\n     *   prefix: 'log'\n     * };\n     *\n     * bucket.enableLogging(config, function(err, apiResponse) {\n     *   if (!err) {\n     *     // Logging functionality enabled successfully.\n     *   }\n     * });\n     *\n     * @example <caption>Optionally, provide a destination bucket.</caption>\n     * const config = {\n     *   prefix: 'log',\n     *   bucket: 'destination-bucket'\n     * };\n     *\n     * bucket.enableLogging(config, function(err, apiResponse) {});\n     *\n     * @example <caption>If the callback is omitted, we'll return a Promise.</caption>\n     * bucket.enableLogging(config).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     */\n\n  }, {\n    key: \"enableLogging\",\n    value: function enableLogging(config, callback) {\n      var _this7 = this;\n\n      if (!config || typeof config === 'function' || typeof config.prefix === 'undefined') {\n        throw new Error('A configuration object with a prefix is required.');\n      }\n\n      var logBucket = config.bucket ? config.bucket.id || config.bucket : this.id;\n\n      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var setMetadataResponse, _yield$_this7$iam$get, _yield$_this7$iam$get2, policy, _yield$_this7$setMeta, _yield$_this7$setMeta2;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _this7.iam.getPolicy();\n\n              case 3:\n                _yield$_this7$iam$get = _context.sent;\n                _yield$_this7$iam$get2 = _slicedToArray(_yield$_this7$iam$get, 1);\n                policy = _yield$_this7$iam$get2[0];\n                policy.bindings.push({\n                  members: ['group:cloud-storage-analytics@google.com'],\n                  role: 'roles/storage.objectCreator'\n                });\n                _context.next = 9;\n                return _this7.iam.setPolicy(policy);\n\n              case 9:\n                _context.next = 11;\n                return _this7.setMetadata({\n                  logging: {\n                    logBucket: logBucket,\n                    logObjectPrefix: config.prefix\n                  }\n                });\n\n              case 11:\n                _yield$_this7$setMeta = _context.sent;\n                _yield$_this7$setMeta2 = _slicedToArray(_yield$_this7$setMeta, 1);\n                setMetadataResponse = _yield$_this7$setMeta2[0];\n                _context.next = 20;\n                break;\n\n              case 16:\n                _context.prev = 16;\n                _context.t0 = _context[\"catch\"](0);\n                callback(_context.t0);\n                return _context.abrupt(\"return\");\n\n              case 20:\n                callback(null, setMetadataResponse);\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 16]]);\n      }))();\n    }\n    /**\n     * @typedef {array} EnableRequesterPaysResponse\n     * @property {object} 0 The full API response.\n     */\n\n    /**\n     * @callback EnableRequesterPaysCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n\n    /**\n     * <div class=\"notice\">\n     *   <strong>Early Access Testers Only</strong>\n     *   <p>\n     *     This feature is not yet widely-available.\n     *   </p>\n     * </div>\n     *\n     * Enable `requesterPays` functionality for this bucket. This enables you, the\n     * bucket owner, to have the requesting user assume the charges for the access\n     * to your bucket and its contents.\n     *\n     * @param {EnableRequesterPaysCallback} [callback] Callback function.\n     * @returns {Promise<EnableRequesterPaysResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.enableRequesterPays(function(err, apiResponse) {\n     *   if (!err) {\n     *     // requesterPays functionality enabled successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.enableRequesterPays().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     *\n     * @example <caption>include:samples/requesterPays.js</caption>\n     * region_tag:storage_enable_requester_pays\n     * Example of enabling requester pays:\n     */\n\n  }, {\n    key: \"enableRequesterPays\",\n    value: function enableRequesterPays(callback) {\n      this.setMetadata({\n        billing: {\n          requesterPays: true\n        }\n      }, callback || common_1.util.noop);\n    }\n    /**\n     * Create a {@link File} object. See {@link File} to see how to handle\n     * the different use cases you may have.\n     *\n     * @param {string} name The name of the file in this bucket.\n     * @param {object} [options] Configuration options.\n     * @param {string|number} [options.generation] Only use a specific revision of\n     *     this file.\n     * @param {string} [options.encryptionKey] A custom encryption key. See\n     *     [Customer-supplied Encryption\n     * Keys](https://cloud.google.com/storage/docs/encryption#customer-supplied).\n     * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will\n     *     be used to encrypt the object. Must be in the format:\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n     *     KMS key ring must use the same location as the bucket.\n     * @returns {File}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     * const file = bucket.file('my-existing-file.png');\n     */\n\n  }, {\n    key: \"file\",\n    value: function file(name, options) {\n      if (!name) {\n        throw Error('A file name must be specified.');\n      }\n\n      return new file_1.File(this, name, options);\n    }\n    /**\n     * @typedef {array} GetFilesResponse\n     * @property {File[]} 0 Array of {@link File} instances.\n     */\n\n    /**\n     * @callback GetFilesCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files Array of {@link File} instances.\n     */\n\n    /**\n     * Query object for listing files.\n     *\n     * @typedef {object} GetFilesOptions\n     * @property {boolean} [autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @property {string} [delimiter] Results will contain only objects whose\n     *     names, aside from the prefix, do not contain delimiter. Objects whose\n     *     names, aside from the prefix, contain delimiter will have their name\n     *     truncated after the delimiter, returned in `apiResponse.prefixes`.\n     *     Duplicate prefixes are omitted.\n     * @property {string} [directory] Filter results based on a directory name, or\n     *     more technically, a \"prefix\".\n     * @property {string} [prefix] Filter results to objects whose names begin\n     *     with this prefix.\n     * @property {number} [maxApiCalls] Maximum number of API calls to make.\n     * @property {number} [maxResults] Maximum number of items plus prefixes to\n     *     return.\n     * @property {string} [pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {boolean} [versions] If true, returns File objects scoped to\n     *     their versions.\n     */\n\n    /**\n     * Get {@link File} objects for the files currently in the bucket.\n     *\n     * @see [Objects: list API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objects/list}\n     *\n     * @param {GetFilesOptions} [query] Query object for listing files.\n     * @param {GetFilesCallback} [callback] Callback function.\n     * @returns {Promise<GetFilesResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.getFiles(function(err, files) {\n     *   if (!err) {\n     *     // files is an array of File objects.\n     *   }\n     * });\n     *\n     * //-\n     * // If your bucket has versioning enabled, you can get all of your files\n     * // scoped to their generation.\n     * //-\n     * bucket.getFiles({\n     *   versions: true\n     * }, function(err, files) {\n     *   // Each file is scoped to its generation.\n     * });\n     *\n     * //-\n     * // To control how many API requests are made and page through the results\n     * // manually, set `autoPaginate` to `false`.\n     * //-\n     * const callback = function(err, files, nextQuery, apiResponse) {\n     *   if (nextQuery) {\n     *     // More results exist.\n     *     bucket.getFiles(nextQuery, callback);\n     *   }\n     *\n     *   // The `metadata` property is populated for you with the metadata at the\n     *   // time of fetching.\n     *   files[0].metadata;\n     *\n     *   // However, in cases where you are concerned the metadata could have\n     *   // changed, use the `getMetadata` method.\n     *   files[0].getMetadata(function(err, metadata) {});\n     * };\n     *\n     * bucket.getFiles({\n     *   autoPaginate: false\n     * }, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getFiles().then(function(data) {\n     *   const files = data[0];\n     * });\n     *\n     * @example <caption><h6>Simulating a File System</h6><p>With `autoPaginate: false`, it's possible to iterate over files which incorporate a common structure using a delimiter.</p><p>Consider the following remote objects:</p><ol><li>\"a\"</li><li>\"a/b/c/d\"</li><li>\"b/d/e\"</li></ol><p>Using a delimiter of `/` will return a single file, \"a\".</p><p>`apiResponse.prefixes` will return the \"sub-directories\" that were found:</p><ol><li>\"a/\"</li><li>\"b/\"</li></ol></caption>\n     * bucket.getFiles({\n     *   autoPaginate: false,\n     *   delimiter: '/'\n     * }, function(err, files, nextQuery, apiResponse) {\n     *   // files = [\n     *   //   {File} // File object for file \"a\"\n     *   // ]\n     *\n     *   // apiResponse.prefixes = [\n     *   //   'a/',\n     *   //   'b/'\n     *   // ]\n     * });\n     *\n     * @example <caption>Using prefixes, it's now possible to simulate a file system with follow-up requests.</caption>\n     * bucket.getFiles({\n     *   autoPaginate: false,\n     *   delimiter: '/',\n     *   prefix: 'a/'\n     * }, function(err, files, nextQuery, apiResponse) {\n     *   // No files found within \"directory\" a.\n     *   // files = []\n     *\n     *   // However, a \"sub-directory\" was found.\n     *   // This prefix can be used to continue traversing the \"file system\".\n     *   // apiResponse.prefixes = [\n     *   //   'a/b/'\n     *   // ]\n     * });\n     *\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_list_files\n     * Another example:\n     *\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_list_files_with_prefix\n     * Example of listing files, filtered by a prefix:\n     */\n\n  }, {\n    key: \"getFiles\",\n    value: function getFiles(queryOrCallback, callback) {\n      var _this8 = this;\n\n      var query = typeof queryOrCallback === 'object' ? queryOrCallback : {};\n\n      if (!callback) {\n        callback = queryOrCallback;\n      }\n\n      query = Object.assign({}, query);\n\n      if (query.directory) {\n        query.prefix = \"\".concat(query.directory, \"/\").replace(/\\/*$/, '/');\n        delete query.directory;\n      }\n\n      this.request({\n        uri: '/o',\n        qs: query\n      }, function (err, resp) {\n        if (err) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          callback(err, null, null, resp);\n          return;\n        }\n\n        var files = arrify(resp.items).map(function (file) {\n          var options = {};\n\n          if (query.versions) {\n            options.generation = file.generation;\n          }\n\n          if (file.kmsKeyName) {\n            options.kmsKeyName = file.kmsKeyName;\n          }\n\n          var fileInstance = _this8.file(file.name, options);\n\n          fileInstance.metadata = file;\n          return fileInstance;\n        });\n        var nextQuery = null;\n\n        if (resp.nextPageToken) {\n          nextQuery = Object.assign({}, query, {\n            pageToken: resp.nextPageToken\n          });\n        } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n        callback(null, files, nextQuery, resp);\n      });\n    }\n    /**\n     * @typedef {object} GetLabelsOptions Configuration options for Bucket#getLabels().\n     * @param {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n\n    /**\n     * @typedef {array} GetLabelsResponse\n     * @property {object} 0 Object of labels currently set on this bucket.\n     */\n\n    /**\n     * @callback GetLabelsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} labels Object of labels currently set on this bucket.\n     */\n\n    /**\n     * Get the labels currently set on this bucket.\n     *\n     * @param {object} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {GetLabelsCallback} [callback] Callback function.\n     * @returns {Promise<GetLabelsCallback>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.getLabels(function(err, labels) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   // labels = {\n     *   //   label: 'labelValue',\n     *   //   ...\n     *   // }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getLabels().then(function(data) {\n     *   const labels = data[0];\n     * });\n     */\n\n  }, {\n    key: \"getLabels\",\n    value: function getLabels(optionsOrCallback, callback) {\n      var options = {};\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n      } else if (optionsOrCallback) {\n        options = optionsOrCallback;\n      }\n\n      this.getMetadata(options, function (err, metadata) {\n        if (err) {\n          callback(err, null);\n          return;\n        }\n\n        callback(null, metadata.labels || {});\n      });\n    }\n    /**\n     * @typedef {object} GetNotificationOptions Configuration options for Bucket#getNotification().\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n\n    /**\n     * @callback GetNotificationsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Notification[]} notifications Array of {@link Notification}\n     *     instances.\n     * @param {object} apiResponse The full API response.\n     */\n\n    /**\n     * @typedef {array} GetNotificationsResponse\n     * @property {Notification[]} 0 Array of {@link Notification} instances.\n     * @property {object} 1 The full API response.\n     */\n\n    /**\n     * Retrieves a list of notification subscriptions for a given bucket.\n     *\n     * @see [Notifications: list]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/list}\n     *\n     * @param {GetNotificationsOptions} [options] Configuration options.\n     * @param {GetNotificationsCallback} [callback] Callback function.\n     * @returns {Promise<GetNotificationsResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * bucket.getNotifications(function(err, notifications, apiResponse) {\n     *   if (!err) {\n     *     // notifications is an array of Notification objects.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getNotifications().then(function(data) {\n     *   const notifications = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * @example <caption>include:samples/notifications.js</caption>\n     * region_tag:storage_list_notifications\n     * Another example:\n     */\n\n  }, {\n    key: \"getNotifications\",\n    value: function getNotifications(optionsOrCallback, callback) {\n      var _this9 = this;\n\n      var options = {};\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n      } else if (optionsOrCallback) {\n        options = optionsOrCallback;\n      }\n\n      this.request({\n        uri: '/notificationConfigs',\n        qs: options\n      }, function (err, resp) {\n        if (err) {\n          callback(err, null, resp);\n          return;\n        }\n\n        var notifications = arrify(resp.items).map(function (notification) {\n          var notificationInstance = _this9.notification(notification.id);\n\n          notificationInstance.metadata = notification;\n          return notificationInstance;\n        });\n        callback(null, notifications, resp);\n      });\n    }\n    /**\n     * @typedef {array} GetSignedUrlResponse\n     * @property {object} 0 The signed URL.\n     */\n\n    /**\n     * @callback GetSignedUrlCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} url The signed URL.\n     */\n\n    /**\n     * @typedef {object} GetBucketSignedUrlConfig\n     * @property {string} action Currently only supports \"list\" (HTTP: GET).\n     * @property {*} expires A timestamp when this link will expire. Any value\n     *     given is passed to `new Date()`.\n     *     Note: 'v4' supports maximum duration of 7 days (604800 seconds) from now.\n     * @property {string} [version='v2'] The signing version to use, either\n     *     'v2' or 'v4'.\n     * @param {boolean} [virtualHostedStyle=false] Use virtual hosted-style\n     *     URLs ('https://mybucket.storage.googleapis.com/...') instead of path-style\n     *     ('https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\n     *     should generally be preferred instaed of path-style URL.\n     *     Currently defaults to `false` for path-style, although this may change in a\n     *     future major-version release.\n     * @property {string} [cname] The cname for this bucket, i.e.,\n     *     \"https://cdn.example.com\".\n     *     See [reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls#example}\n     * @property {object} [extensionHeaders] If these headers are used, the\n     *     server will check to make sure that the client provides matching\n     * values. See [Canonical extension\n     * headers](https://cloud.google.com/storage/docs/access-control/signed-urls#about-canonical-extension-headers)\n     *     for the requirements of this feature, most notably:\n     *       - The header name must be prefixed with `x-goog-`\n     *       - The header name must be all lowercase\n     *     Note: Multi-valued header passed as an array in the extensionHeaders\n     *           object is converted into a string, delimited by `,` with\n     *           no space. Requests made using the signed URL will need to\n     *           delimit multi-valued headers using a single `,` as well, or\n     *           else the server will report a mismatched signature.\n     * @param {object} [config.queryParams] Additional query parameters to include\n     *     in the signed URL.\n     */\n\n    /**\n     * Get a signed URL to allow limited time access to a bucket.\n     *\n     * In Google Cloud Platform environments, such as Cloud Functions and App\n     * Engine, you usually don't provide a `keyFilename` or `credentials` during\n     * instantiation. In those environments, we call the\n     * [signBlob\n     * API](https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob)\n     * to create a signed URL. That API requires either the\n     * `https://www.googleapis.com/auth/iam` or\n     * `https://www.googleapis.com/auth/cloud-platform` scope, so be sure they are\n     * enabled.\n     *\n     * @see [Signed URLs Reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls}\n     *\n     * @throws {Error} if an expiration timestamp from the past is given.\n     *\n     * @param {GetBucketSignedUrlConfig} config Configuration object.\n     * @param {GetSignedUrlCallback} [callback] Callback function.\n     * @returns {Promise<GetSignedUrlResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * //-\n     * // Generate a URL that allows temporary access to list files in a bucket.\n     * //-\n     * const request = require('request');\n     *\n     * const config = {\n     *   action: 'list',\n     *   expires: '03-17-2025'\n     * };\n     *\n     * bucket.getSignedUrl(config, function(err, url) {\n     *   if (err) {\n     *     console.error(err);\n     *     return;\n     *   }\n     *\n     *   // The bucket is now available to be listed from this URL.\n     *   request(url, function(err, resp) {\n     *     // resp.statusCode = 200\n     *   });\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getSignedUrl(config).then(function(data) {\n     *   const url = data[0];\n     * });\n     */\n\n  }, {\n    key: \"getSignedUrl\",\n    value: function getSignedUrl(cfg, callback) {\n      var method = BucketActionToHTTPMethod[cfg.action];\n\n      if (!method) {\n        throw new Error('The action is not provided or invalid.');\n      }\n\n      var signConfig = {\n        method: method,\n        expires: cfg.expires,\n        version: cfg.version,\n        cname: cfg.cname,\n        extensionHeaders: cfg.extensionHeaders || {},\n        queryParams: cfg.queryParams || {}\n      };\n\n      if (!this.signer) {\n        this.signer = new signer_1.URLSigner(this.storage.authClient, this);\n      }\n\n      this.signer.getSignedUrl(signConfig).then(function (signedUrl) {\n        return callback(null, signedUrl);\n      }, callback);\n    }\n    /**\n     * @callback BucketLockCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n\n    /**\n     * Lock a previously-defined retention policy. This will prevent changes to\n     * the policy.\n     *\n     * @throws {Error} if a metageneration is not provided.\n     *\n     * @param {Number|String} metageneration The bucket's metageneration. This is\n     *     accesssible from calling {@link File#getMetadata}.\n     * @param {BucketLockCallback} [callback] Callback function.\n     * @returns {Promise<BucketLockResponse>}\n     *\n     * @example\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * const metageneration = 2;\n     *\n     * bucket.lock(metageneration, function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.lock(metageneration).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     */\n\n  }, {\n    key: \"lock\",\n    value: function lock(metageneration, callback) {\n      var metatype = typeof metageneration;\n\n      if (metatype !== 'number' && metatype !== 'string') {\n        throw new Error('A metageneration must be provided.');\n      }\n\n      this.request({\n        method: 'POST',\n        uri: '/lockRetentionPolicy',\n        qs: {\n          ifMetagenerationMatch: metageneration\n        }\n      }, callback);\n    }\n    /**\n     * @typedef {array} MakeBucketPrivateResponse\n     * @property {File[]} 0 List of files made private.\n     */\n\n    /**\n     * @callback MakeBucketPrivateCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files List of files made private.\n     */\n\n    /**\n     * @typedef {object} MakeBucketPrivateOptions\n     * @param {boolean} [includeFiles=false] Make each file in the bucket\n     *     private.\n     * @param {boolean} [force] Queue errors occurred while making files\n     *     private until all files have been processed.\n     * @param {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n\n    /**\n     * Make the bucket listing private.\n     *\n     * You may also choose to make the contents of the bucket private by\n     * specifying `includeFiles: true`. This will automatically run\n     * {@link File#makePrivate} for every file in the bucket.\n     *\n     * When specifying `includeFiles: true`, use `force: true` to delay execution\n     * of your callback until all files have been processed. By default, the\n     * callback is executed after the first error. Use `force` to queue such\n     * errors until all files have been processed, after which they will be\n     * returned as an array as the first argument to your callback.\n     *\n     * NOTE: This may cause the process to be long-running and use a high number\n     * of requests. Use with caution.\n     *\n     * @see [Buckets: patch API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch}\n     *\n     * @param {MakeBucketPrivateOptions} [options] Configuration options.\n     * @param {MakeBucketPrivateCallback} [callback] Callback function.\n     * @returns {Promise<MakeBucketPrivateResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Make the bucket private.\n     * //-\n     * bucket.makePrivate(function(err) {});\n     *\n     * //-\n     * // Make the bucket and its contents private.\n     * //-\n     * const opts = {\n     *   includeFiles: true\n     * };\n     *\n     * bucket.makePrivate(opts, function(err, files) {\n     *   // `err`:\n     *   //    The first error to occur, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made private in the bucket.\n     * });\n     *\n     * //-\n     * // Make the bucket and its contents private, using force to suppress errors\n     * // until all files have been processed.\n     * //-\n     * const opts = {\n     *   includeFiles: true,\n     *   force: true\n     * };\n     *\n     * bucket.makePrivate(opts, function(errors, files) {\n     *   // `errors`:\n     *   //    Array of errors if any occurred, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made private in the bucket.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.makePrivate(opts).then(function(data) {\n     *   const files = data[0];\n     * });\n     */\n\n  }, {\n    key: \"makePrivate\",\n    value: function makePrivate(optionsOrCallback, callback) {\n      var _this10 = this;\n\n      var options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n      callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n      options.private = true;\n      var query = {\n        predefinedAcl: 'projectPrivate'\n      };\n\n      if (options.userProject) {\n        query.userProject = options.userProject;\n      }\n\n      this.setMetadata({\n        // You aren't allowed to set both predefinedAcl & acl properties on\n        // a bucket so acl must explicitly be nullified.\n        acl: null\n      }, query).then(function () {\n        if (options.includeFiles) {\n          return util_1.promisify(_this10.makeAllFilesPublicPrivate_).call(_this10, options);\n        }\n\n        return [];\n      }).then(function (files) {\n        return callback(null, files);\n      }, callback);\n    }\n    /**\n     * @typedef {object} MakeBucketPublicOptions\n     * @param {boolean} [includeFiles=false] Make each file in the bucket\n     *     private.\n     * @param {boolean} [force] Queue errors occurred while making files\n     *     private until all files have been processed.\n     */\n\n    /**\n     * @callback MakeBucketPublicCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files List of files made public.\n     */\n\n    /**\n     * @typedef {array} MakeBucketPublicResponse\n     * @property {File[]} 0 List of files made public.\n     */\n\n    /**\n     * Make the bucket publicly readable.\n     *\n     * You may also choose to make the contents of the bucket publicly readable by\n     * specifying `includeFiles: true`. This will automatically run\n     * {@link File#makePublic} for every file in the bucket.\n     *\n     * When specifying `includeFiles: true`, use `force: true` to delay execution\n     * of your callback until all files have been processed. By default, the\n     * callback is executed after the first error. Use `force` to queue such\n     * errors until all files have been processed, after which they will be\n     * returned as an array as the first argument to your callback.\n     *\n     * NOTE: This may cause the process to be long-running and use a high number\n     * of requests. Use with caution.\n     *\n     * @see [Buckets: patch API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch}\n     *\n     * @param {MakeBucketPublicOptions} [options] Configuration options.\n     * @param {MakeBucketPublicCallback} [callback] Callback function.\n     * @returns {Promise<MakeBucketPublicResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Make the bucket publicly readable.\n     * //-\n     * bucket.makePublic(function(err) {});\n     *\n     * //-\n     * // Make the bucket and its contents publicly readable.\n     * //-\n     * const opts = {\n     *   includeFiles: true\n     * };\n     *\n     * bucket.makePublic(opts, function(err, files) {\n     *   // `err`:\n     *   //    The first error to occur, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made public in the bucket.\n     * });\n     *\n     * //-\n     * // Make the bucket and its contents publicly readable, using force to\n     * // suppress errors until all files have been processed.\n     * //-\n     * const opts = {\n     *   includeFiles: true,\n     *   force: true\n     * };\n     *\n     * bucket.makePublic(opts, function(errors, files) {\n     *   // `errors`:\n     *   //    Array of errors if any occurred, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made public in the bucket.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.makePublic(opts).then(function(data) {\n     *   const files = data[0];\n     * });\n     */\n\n  }, {\n    key: \"makePublic\",\n    value: function makePublic(optionsOrCallback, callback) {\n      var _this11 = this;\n\n      var options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n      callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n      var req = extend(true, {\n        public: true\n      }, options);\n      this.acl.add({\n        entity: 'allUsers',\n        role: 'READER'\n      }).then(function () {\n        return _this11.acl.default.add({\n          entity: 'allUsers',\n          role: 'READER'\n        });\n      }).then(function () {\n        if (req.includeFiles) {\n          return util_1.promisify(_this11.makeAllFilesPublicPrivate_).call(_this11, req);\n        }\n\n        return [];\n      }).then(function (files) {\n        return callback(null, files);\n      }, callback);\n    }\n    /**\n     * Get a reference to a Cloud Pub/Sub Notification.\n     *\n     * @param {string} id ID of notification.\n     * @returns {Notification}\n     * @see Notification\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     * const notification = bucket.notification('1');\n     */\n\n  }, {\n    key: \"notification\",\n    value: function notification(id) {\n      if (!id) {\n        throw new Error('You must supply a notification ID.');\n      }\n\n      return new notification_1.Notification(this, id);\n    }\n    /**\n     * Remove an already-existing retention policy from this bucket, if it is not\n     * locked.\n     *\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.removeRetentionPeriod(function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.removeRetentionPeriod().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     */\n\n  }, {\n    key: \"removeRetentionPeriod\",\n    value: function removeRetentionPeriod(callback) {\n      this.setMetadata({\n        retentionPolicy: null\n      }, callback);\n    }\n    /**\n     * Makes request and applies userProject query parameter if necessary.\n     *\n     * @private\n     *\n     * @param {object} reqOpts - The request options.\n     * @param {function} callback - The callback function.\n     */\n\n  }, {\n    key: \"request\",\n    value: function request(reqOpts, callback) {\n      if (this.userProject && (!reqOpts.qs || !reqOpts.qs.userProject)) {\n        reqOpts.qs = extend(reqOpts.qs, {\n          userProject: this.userProject\n        });\n      }\n\n      return _get(_getPrototypeOf(Bucket.prototype), \"request\", this).call(this, reqOpts, callback);\n    }\n    /**\n     * @typedef {array} SetLabelsResponse\n     * @property {object} 0 The bucket metadata.\n     */\n\n    /**\n     * @callback SetLabelsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} metadata The bucket metadata.\n     */\n\n    /**\n     * @typedef {object} SetLabelsOptions Configuration options for Bucket#setLabels().\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n\n    /**\n     * Set labels on the bucket.\n     *\n     * This makes an underlying call to {@link Bucket#setMetadata}, which\n     * is a PATCH request. This means an individual label can be overwritten, but\n     * unmentioned labels will not be touched.\n     *\n     * @param {object<string, string>} labels Labels to set on the bucket.\n     * @param {object} [options] Configuration options.\n     * @param {SetLabelsCallback} [callback] Callback function.\n     * @returns {Promise<SetLabelsResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * const labels = {\n     *   labelone: 'labelonevalue',\n     *   labeltwo: 'labeltwovalue'\n     * };\n     *\n     * bucket.setLabels(labels, function(err, metadata) {\n     *   if (!err) {\n     *     // Labels set successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setLabels(labels).then(function(data) {\n     *   const metadata = data[0];\n     * });\n     */\n\n  }, {\n    key: \"setLabels\",\n    value: function setLabels(labels, optionsOrCallback, callback) {\n      var options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n      callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n      callback = callback || common_1.util.noop;\n      this.setMetadata({\n        labels: labels\n      }, options, callback);\n    }\n    /**\n     * Lock all objects contained in the bucket, based on their creation time. Any\n     * attempt to overwrite or delete objects younger than the retention period\n     * will result in a `PERMISSION_DENIED` error.\n     *\n     * An unlocked retention policy can be modified or removed from the bucket via\n     * {@link File#removeRetentionPeriod} and {@link File#setRetentionPeriod}. A\n     * locked retention policy cannot be removed or shortened in duration for the\n     * lifetime of the bucket. Attempting to remove or decrease period of a locked\n     * retention policy will result in a `PERMISSION_DENIED` error. You can still\n     * increase the policy.\n     *\n     * @param {*} duration In seconds, the minimum retention time for all objects\n     *     contained in this bucket.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * const DURATION_SECONDS = 15780000; // 6 months.\n     *\n     * //-\n     * // Lock the objects in this bucket for 6 months.\n     * //-\n     * bucket.setRetentionPeriod(DURATION_SECONDS, function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setRetentionPeriod(DURATION_SECONDS).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     */\n\n  }, {\n    key: \"setRetentionPeriod\",\n    value: function setRetentionPeriod(duration, callback) {\n      this.setMetadata({\n        retentionPolicy: {\n          retentionPeriod: duration\n        }\n      }, callback);\n    }\n    /**\n     * This can be used to set the CORS configuration on the bucket.\n     *\n     * The configuration will be overwritten with the value passed into this.\n     *\n     * @param {Cors[]} corsConfiguration The new CORS configuration to set\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * const corsConfiguration = [{maxAgeSeconds: 3600}]; // 1 hour\n     * bucket.setCorsConfiguration(corsConfiguration);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setCorsConfiguration(corsConfiguration).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     */\n\n  }, {\n    key: \"setCorsConfiguration\",\n    value: function setCorsConfiguration(corsConfiguration, callback) {\n      this.setMetadata({\n        cors: corsConfiguration\n      }, callback);\n    }\n    /**\n     * @typedef {object} SetBucketStorageClassOptions\n     * @param {string} [userProject] - The ID of the project which will be\n     *     billed for the request.\n     */\n\n    /**\n     * @callback SetBucketStorageClassCallback\n     * @param {?Error} err Request error, if any.\n     */\n\n    /**\n     * Set the default storage class for new files in this bucket.\n     *\n     * @see [Storage Classes]{@link https://cloud.google.com/storage/docs/storage-classes}\n     *\n     * @param {string} storageClass The new storage class. (`standard`,\n     *     `nearline`, `coldline`, or `archive`).\n     *     **Note:** The storage classes `multi_regional`, `regional`, and\n     *     `durable_reduced_availability` are now legacy and will be deprecated in\n     *     the future.\n     * @param {object} [options] Configuration options.\n     * @param {string} [options.userProject] - The ID of the project which will be\n     *     billed for the request.\n     * @param {SetStorageClassCallback} [callback] Callback function.\n     * @returns {Promise}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.setStorageClass('nearline', function(err, apiResponse) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   // The storage class was updated successfully.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setStorageClass('nearline').then(function() {});\n     */\n\n  }, {\n    key: \"setStorageClass\",\n    value: function setStorageClass(storageClass, optionsOrCallback, callback) {\n      var options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n      callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback; // In case we get input like `storageClass`, convert to `storage_class`.\n\n      storageClass = storageClass.replace(/-/g, '_').replace(/([a-z])([A-Z])/g, function (_, low, up) {\n        return low + '_' + up;\n      }).toUpperCase();\n      this.setMetadata({\n        storageClass: storageClass\n      }, options, callback);\n    }\n    /**\n     * Set a user project to be billed for all requests made from this Bucket\n     * object and any files referenced from this Bucket object.\n     *\n     * @param {string} userProject The user project.\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.setUserProject('grape-spaceship-123');\n     */\n\n  }, {\n    key: \"setUserProject\",\n    value: function setUserProject(userProject) {\n      var _this12 = this;\n\n      this.userProject = userProject;\n      var methods = ['create', 'delete', 'exists', 'get', 'getMetadata', 'setMetadata'];\n      methods.forEach(function (method) {\n        var methodConfig = _this12.methods[method];\n\n        if (typeof methodConfig === 'object') {\n          if (typeof methodConfig.reqOpts === 'object') {\n            extend(methodConfig.reqOpts.qs, {\n              userProject: userProject\n            });\n          } else {\n            methodConfig.reqOpts = {\n              qs: {\n                userProject: userProject\n              }\n            };\n          }\n        }\n      });\n    }\n    /**\n     * @typedef {object} UploadOptions Configuration options for Bucket#upload().\n     * @param {string|File} [options.destination] The place to save\n     *     your file. If given a string, the file will be uploaded to the bucket\n     *     using the string as a filename. When given a File object, your local\n     * file will be uploaded to the File object's bucket and under the File\n     * object's name. Lastly, when this argument is omitted, the file is uploaded\n     * to your bucket using the name of the local file.\n     * @param {string} [options.encryptionKey] A custom encryption key. See\n     *     [Customer-supplied Encryption\n     * Keys](https://cloud.google.com/storage/docs/encryption#customer-supplied).\n     * @param {boolean} [options.gzip] Automatically gzip the file. This will set\n     *     `options.metadata.contentEncoding` to `gzip`.\n     * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will\n     *     be used to encrypt the object. Must be in the format:\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n     * @param {object} [options.metadata] See an\n     *     [Objects: insert request\n     * body](https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON).\n     * @param {string} [options.offset] The starting byte of the upload stream, for\n     *     resuming an interrupted upload. Defaults to 0.\n     * @param {string} [options.predefinedAcl] Apply a predefined set of access\n     *     controls to this object.\n     *\n     *     Acceptable values are:\n     *     - **`authenticatedRead`** - Object owner gets `OWNER` access, and\n     *       `allAuthenticatedUsers` get `READER` access.\n     *\n     *     - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\n     *       project team owners get `OWNER` access.\n     *\n     *     - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\n     *       team owners get `READER` access.\n     *\n     *     - **`private`** - Object owner gets `OWNER` access.\n     *\n     *     - **`projectPrivate`** - Object owner gets `OWNER` access, and project\n     *       team members get access according to their roles.\n     *\n     *     - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\n     * get `READER` access.\n     * @param {boolean} [options.private] Make the uploaded file private. (Alias for\n     *     `options.predefinedAcl = 'private'`)\n     * @param {boolean} [options.public] Make the uploaded file public. (Alias for\n     *     `options.predefinedAcl = 'publicRead'`)\n     * @param {boolean} [options.resumable] Force a resumable upload. (default:\n     *     true for files larger than 5 MB).\n     * @param {number} [options.timeout=60000] Set the HTTP request timeout in\n     *     milliseconds. This option is not available for resumable uploads.\n     *     Default: `60000`\n     * @param {string} [options.uri] The URI for an already-created resumable\n     *     upload. See {@link File#createResumableUpload}.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {string|boolean} [options.validation] Possible values: `\"md5\"`,\n     *     `\"crc32c\"`, or `false`. By default, data integrity is validated with an\n     *     MD5 checksum for maximum reliability. CRC32c will provide better\n     *     performance with less reliability. You may also choose to skip\n     * validation completely, however this is **not recommended**.\n     */\n\n    /**\n     * @typedef {array} UploadResponse\n     * @property {object} 0 The uploaded {@link File}.\n     * @property {object} 1 The full API response.\n     */\n\n    /**\n     * @callback UploadCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} file The uploaded {@link File}.\n     * @param {object} apiResponse The full API response.\n     */\n\n    /**\n     * Upload a file to the bucket. This is a convenience method that wraps\n     * {@link File#createWriteStream}.\n     *\n     * You can specify whether or not an upload is resumable by setting\n     * `options.resumable`. *Resumable uploads are enabled by default if your\n     * input file is larger than 5 MB.*\n     *\n     * For faster crc32c computation, you must manually install\n     * [`fast-crc32c`](https://www.npmjs.com/package/fast-crc32c):\n     *\n     *     $ npm install --save fast-crc32c\n     *\n     * @see [Upload Options (Simple or Resumable)]{@link https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload#uploads}\n     * @see [Objects: insert API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert}\n     *\n     * @param {string} pathString The fully qualified path to the file you\n     *     wish to upload to your bucket.\n     * @param {UploadOptions} [options] Configuration options.\n     * @param {UploadCallback} [callback] Callback function.\n     * @returns {Promise<UploadResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Upload a file from a local path.\n     * //-\n     * bucket.upload('/local/path/image.png', function(err, file, apiResponse) {\n     *   // Your bucket now contains:\n     *   // - \"image.png\" (with the contents of `/local/path/image.png')\n     *\n     *   // `file` is an instance of a File object that refers to your new file.\n     * });\n     *\n     *\n     * //-\n     * // It's not always that easy. You will likely want to specify the filename\n     * // used when your new file lands in your bucket.\n     * //\n     * // You may also want to set metadata or customize other options.\n     * //-\n     * const options = {\n     *   destination: 'new-image.png',\n     *   resumable: true,\n     *   validation: 'crc32c',\n     *   metadata: {\n     *     metadata: {\n     *       event: 'Fall trip to the zoo'\n     *     }\n     *   }\n     * };\n     *\n     * bucket.upload('local-image.png', options, function(err, file) {\n     *   // Your bucket now contains:\n     *   // - \"new-image.png\" (with the contents of `local-image.png')\n     *\n     *   // `file` is an instance of a File object that refers to your new file.\n     * });\n     *\n     * //-\n     * // You can also have a file gzip'd on the fly.\n     * //-\n     * bucket.upload('index.html', { gzip: true }, function(err, file) {\n     *   // Your bucket now contains:\n     *   // - \"index.html\" (automatically compressed with gzip)\n     *\n     *   // Downloading the file with `file.download` will automatically decode\n     * the\n     *   // file.\n     * });\n     *\n     * //-\n     * // You may also re-use a File object, {File}, that references\n     * // the file you wish to create or overwrite.\n     * //-\n     * const options = {\n     *   destination: bucket.file('existing-file.png'),\n     *   resumable: false\n     * };\n     *\n     * bucket.upload('local-img.png', options, function(err, newFile) {\n     *   // Your bucket now contains:\n     *   // - \"existing-file.png\" (with the contents of `local-img.png')\n     *\n     *   // Note:\n     *   // The `newFile` parameter is equal to `file`.\n     * });\n     *\n     * //-\n     * // To use\n     * // <a\n     * href=\"https://cloud.google.com/storage/docs/encryption#customer-supplied\">\n     * // Customer-supplied Encryption Keys</a>, provide the `encryptionKey`\n     * option.\n     * //-\n     * const crypto = require('crypto');\n     * const encryptionKey = crypto.randomBytes(32);\n     *\n     * bucket.upload('img.png', {\n     *   encryptionKey: encryptionKey\n     * }, function(err, newFile) {\n     *   // `img.png` was uploaded with your custom encryption key.\n     *\n     *   // `newFile` is already configured to use the encryption key when making\n     *   // operations on the remote object.\n     *\n     *   // However, to use your encryption key later, you must create a `File`\n     *   // instance with the `key` supplied:\n     *   const file = bucket.file('img.png', {\n     *     encryptionKey: encryptionKey\n     *   });\n     *\n     *   // Or with `file#setEncryptionKey`:\n     *   const file = bucket.file('img.png');\n     *   file.setEncryptionKey(encryptionKey);\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.upload('local-image.png').then(function(data) {\n     *   const file = data[0];\n     * });\n     *\n     * To upload a file from a URL, use {@link File#createWriteStream}.\n     *\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_upload_file\n     * Another example:\n     *\n     * @example <caption>include:samples/encryption.js</caption>\n     * region_tag:storage_upload_encrypted_file\n     * Example of uploading an encrypted file:\n     */\n\n  }, {\n    key: \"upload\",\n    value: function upload(pathString, optionsOrCallback, callback) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (global['GCLOUD_SANDBOX_ENV']) {\n        return;\n      }\n\n      var options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n      callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n      options = Object.assign({\n        metadata: {}\n      }, options);\n      var newFile;\n\n      if (options.destination instanceof file_1.File) {\n        newFile = options.destination;\n      } else if (options.destination !== null && typeof options.destination === 'string') {\n        // Use the string as the name of the file.\n        newFile = this.file(options.destination, {\n          encryptionKey: options.encryptionKey,\n          kmsKeyName: options.kmsKeyName\n        });\n      } else {\n        // Resort to using the name of the incoming file.\n        var destination = path.basename(pathString);\n        newFile = this.file(destination, {\n          encryptionKey: options.encryptionKey,\n          kmsKeyName: options.kmsKeyName\n        });\n      }\n\n      if (options.resumable !== null && typeof options.resumable === 'boolean') {\n        upload();\n      } else {\n        // Determine if the upload should be resumable if it's over the threshold.\n        fs.stat(pathString, function (err, fd) {\n          if (err) {\n            callback(err);\n            return;\n          }\n\n          if (fd.size <= RESUMABLE_THRESHOLD) {\n            // Only disable resumable uploads so createWriteStream still attempts them and falls back to simple upload.\n            options.resumable = false;\n          }\n\n          upload();\n        });\n      }\n\n      function upload() {\n        var writable = newFile.createWriteStream(options);\n\n        if (options.onUploadProgress) {\n          writable.on('progress', options.onUploadProgress);\n        }\n\n        fs.createReadStream(pathString).on('error', callback).pipe(writable).on('error', callback).on('finish', function () {\n          callback(null, newFile, newFile.metadata);\n        });\n      }\n    }\n    /**\n     * @private\n     *\n     * @typedef {object} MakeAllFilesPublicPrivateOptions\n     * @property {boolean} [force] Suppress errors until all files have been\n     *     processed.\n     * @property {boolean} [private] Make files private.\n     * @property {boolean} [public] Make files public.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n\n    /**\n     * @private\n     *\n     * @callback SetBucketMetadataCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files Files that were updated.\n     */\n\n    /**\n     * @typedef {array} MakeAllFilesPublicPrivateResponse\n     * @property {File[]} 0 List of files affected.\n     */\n\n    /**\n     * Iterate over all of a bucket's files, calling `file.makePublic()` (public)\n     * or `file.makePrivate()` (private) on each.\n     *\n     * Operations are performed in parallel, up to 10 at once. The first error\n     * breaks the loop, and will execute the provided callback with it. Specify\n     * `{ force: true }` to suppress the errors.\n     *\n     * @private\n     *\n     * @param {MakeAllFilesPublicPrivateOptions} [options] Configuration options.\n     * @param {MakeAllFilesPublicPrivateCallback} callback Callback function.\n     *\n     * @return {Promise<MakeAllFilesPublicPrivateResponse>}\n     */\n\n  }, {\n    key: \"makeAllFilesPublicPrivate_\",\n    value: function makeAllFilesPublicPrivate_(optionsOrCallback, callback) {\n      var MAX_PARALLEL_LIMIT = 10;\n      var errors = [];\n      var updatedFiles = [];\n      var options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n      callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n\n      var processFile = /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(file) {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.prev = 0;\n                  _context2.next = 3;\n                  return options.public ? file.makePublic() : file.makePrivate(options);\n\n                case 3:\n                  updatedFiles.push(file);\n                  _context2.next = 11;\n                  break;\n\n                case 6:\n                  _context2.prev = 6;\n                  _context2.t0 = _context2[\"catch\"](0);\n\n                  if (options.force) {\n                    _context2.next = 10;\n                    break;\n                  }\n\n                  throw _context2.t0;\n\n                case 10:\n                  errors.push(_context2.t0);\n\n                case 11:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[0, 6]]);\n        }));\n\n        return function processFile(_x) {\n          return _ref4.apply(this, arguments);\n        };\n      }();\n\n      this.getFiles(options).then(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 1),\n            files = _ref6[0];\n\n        var limit = pLimit(MAX_PARALLEL_LIMIT);\n        var promises = files.map(function (file) {\n          return limit(function () {\n            return processFile(file);\n          });\n        });\n        return Promise.all(promises);\n      }).then(function () {\n        return callback(errors.length > 0 ? errors : null, updatedFiles);\n      }, function (err) {\n        return callback(err, updatedFiles);\n      });\n    }\n  }, {\n    key: \"getId\",\n    value: function getId() {\n      return this.id;\n    }\n  }]);\n\n  return Bucket;\n}(common_1.ServiceObject);\n\nexports.Bucket = Bucket;\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\n\npaginator_1.paginator.extend(Bucket, 'getFiles');\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\npromisify_1.promisifyAll(Bucket, {\n  exclude: ['request', 'file', 'notification']\n});","map":{"version":3,"sources":["D:/medium clone/node_modules/@google-cloud/storage/build/src/bucket.js"],"names":["Object","defineProperty","exports","value","Bucket","BucketActionToHTTPMethod","common_1","require","paginator_1","promisify_1","arrify","extend","fs","mime","path","pLimit","util_1","snakeize","acl_1","file_1","iam_1","notification_1","signer_1","RESUMABLE_THRESHOLD","storage","name","options","replace","requestQueryObject","userProject","methods","create","reqOpts","qs","delete","exists","get","getMetadata","setMetadata","parent","baseUrl","id","createMethod","createBucket","bind","acl","Acl","request","pathPrefix","default","iam","Iam","getFilesStream","paginator","streamify","rule","optionsOrCallback","callback","util","noop","newLifecycleRules","map","action","apiFormattedRule","condition","type","storageClass","Date","toISOString","append","lifecycle","err","metadata","currentLifecycleRules","concat","sources","destination","Array","isArray","length","Error","convertToFile","file","File","destinationFile","contentType","destinationContentType","method","uri","json","sourceObjects","source","sourceObject","generation","resp","config","address","assign","apiResponse","resourceId","channel","topic","topicIsObject","isCustomType","body","indexOf","payloadFormat","query","notification","queryOrCallback","MAX_PARALLEL_LIMIT","errors","deleteFile","catch","force","push","getFiles","then","files","limit","promises","Promise","all","labelsOrCallback","labels","deleteLabels","nullLabelMap","reduce","labelKey","setLabels","getLabels","keys","billing","requesterPays","prefix","logBucket","bucket","getPolicy","policy","bindings","members","role","setPolicy","logging","logObjectPrefix","setMetadataResponse","directory","items","versions","kmsKeyName","fileInstance","nextQuery","nextPageToken","pageToken","notifications","notificationInstance","cfg","signConfig","expires","version","cname","extensionHeaders","queryParams","signer","URLSigner","authClient","getSignedUrl","signedUrl","metageneration","metatype","ifMetagenerationMatch","private","predefinedAcl","includeFiles","promisify","makeAllFilesPublicPrivate_","call","req","public","add","entity","Notification","retentionPolicy","duration","retentionPeriod","corsConfiguration","cors","_","low","up","toUpperCase","forEach","methodConfig","pathString","global","newFile","encryptionKey","basename","resumable","upload","stat","fd","size","writable","createWriteStream","onUploadProgress","on","createReadStream","pipe","updatedFiles","processFile","makePublic","makePrivate","ServiceObject","promisifyAll","exclude"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Bucket = exports.BucketActionToHTTPMethod = void 0;\nconst common_1 = require(\"@google-cloud/common\");\nconst paginator_1 = require(\"@google-cloud/paginator\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst arrify = require(\"arrify\");\nconst extend = require(\"extend\");\nconst fs = require(\"fs\");\nconst mime = require(\"mime-types\");\nconst path = require(\"path\");\nconst pLimit = require(\"p-limit\");\nconst util_1 = require(\"util\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst snakeize = require('snakeize');\nconst acl_1 = require(\"./acl\");\nconst file_1 = require(\"./file\");\nconst iam_1 = require(\"./iam\");\nconst notification_1 = require(\"./notification\");\nconst signer_1 = require(\"./signer\");\nvar BucketActionToHTTPMethod;\n(function (BucketActionToHTTPMethod) {\n    BucketActionToHTTPMethod[\"list\"] = \"GET\";\n})(BucketActionToHTTPMethod = exports.BucketActionToHTTPMethod || (exports.BucketActionToHTTPMethod = {}));\n/**\n * The size of a file (in bytes) must be greater than this number to\n * automatically trigger a resumable upload.\n *\n * @const {number}\n * @private\n */\nconst RESUMABLE_THRESHOLD = 5000000;\n/**\n * Create a Bucket object to interact with a Cloud Storage bucket.\n *\n * @class\n * @hideconstructor\n *\n * @param {Storage} storage A {@link Storage} instance.\n * @param {string} name The name of the bucket.\n * @param {object} [options] Configuration object.\n * @param {string} [options.userProject] User project.\n *\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('albums');\n */\nclass Bucket extends common_1.ServiceObject {\n    constructor(storage, name, options) {\n        options = options || {};\n        // Allow for \"gs://\"-style input, and strip any trailing slashes.\n        name = name.replace(/^gs:\\/\\//, '').replace(/\\/+$/, '');\n        const requestQueryObject = {};\n        const userProject = options.userProject;\n        if (typeof userProject === 'string') {\n            requestQueryObject.userProject = userProject;\n        }\n        const methods = {\n            /**\n             * Create a bucket.\n             *\n             * @method Bucket#create\n             * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\n             * @param {CreateBucketCallback} [callback] Callback function.\n             * @returns {Promise<CreateBucketResponse>}\n             *\n             * @example\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             * bucket.create(function(err, bucket, apiResponse) {\n             *   if (!err) {\n             *     // The bucket was created successfully.\n             *   }\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.create().then(function(data) {\n             *   const bucket = data[0];\n             *   const apiResponse = data[1];\n             * });\n             */\n            create: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {object} DeleteBucketOptions Configuration options.\n             * @param {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * @typedef {array} DeleteBucketResponse\n             * @property {object} 0 The full API response.\n             */\n            /**\n             * @callback DeleteBucketCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * Delete the bucket.\n             *\n             * @see [Buckets: delete API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/delete}\n             *\n             * @method Bucket#delete\n             * @param {DeleteBucketOptions} [options] Configuration options.\n             * @param {DeleteBucketCallback} [callback] Callback function.\n             * @returns {Promise<DeleteBucketResponse>}\n             *\n             * @example\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             * bucket.delete(function(err, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.delete().then(function(data) {\n             *   const apiResponse = data[0];\n             * });\n             *\n             * @example <caption>include:samples/buckets.js</caption>\n             * region_tag:storage_delete_bucket\n             * Another example:\n             */\n            delete: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {object} BucketExistsOptions Configuration options for Bucket#exists().\n             * @param {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * @typedef {array} BucketExistsResponse\n             * @property {boolean} 0 Whether the {@link Bucket} exists.\n             */\n            /**\n             * @callback BucketExistsCallback\n             * @param {?Error} err Request error, if any.\n             * @param {boolean} exists Whether the {@link Bucket} exists.\n             */\n            /**\n             * Check if the bucket exists.\n             *\n             * @method Bucket#exists\n             * @param {BucketExistsOptions} [options] Configuration options.\n             * @param {BucketExistsCallback} [callback] Callback function.\n             * @returns {Promise<BucketExistsResponse>}\n             *\n             * @example\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             *\n             * bucket.exists(function(err, exists) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.exists().then(function(data) {\n             *   const exists = data[0];\n             * });\n             */\n            exists: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {object} [GetBucketOptions] Configuration options for Bucket#get()\n             * @property {boolean} [autoCreate] Automatically create the object if\n             *     it does not exist. Default: `false`\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * @typedef {array} GetBucketResponse\n             * @property {Bucket} 0 The {@link Bucket}.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * @callback GetBucketCallback\n             * @param {?Error} err Request error, if any.\n             * @param {Bucket} bucket The {@link Bucket}.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * Get a bucket if it exists.\n             *\n             * You may optionally use this to \"get or create\" an object by providing\n             * an object with `autoCreate` set to `true`. Any extra configuration that\n             * is normally required for the `create` method must be contained within\n             * this object as well.\n             *\n             * @method Bucket#get\n             * @param {GetBucketOptions} [options] Configuration options.\n             * @param {GetBucketCallback} [callback] Callback function.\n             * @returns {Promise<GetBucketResponse>}\n             *\n             * @example\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             *\n             * bucket.get(function(err, bucket, apiResponse) {\n             *   // `bucket.metadata` has been populated.\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.get().then(function(data) {\n             *   const bucket = data[0];\n             *   const apiResponse = data[1];\n             * });\n             */\n            get: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {array} GetBucketMetadataResponse\n             * @property {object} 0 The bucket metadata.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * @callback GetBucketMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} metadata The bucket metadata.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {object} GetBucketMetadataOptions Configuration options for Bucket#getMetadata().\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * Get the bucket's metadata.\n             *\n             * To set metadata, see {@link Bucket#setMetadata}.\n             *\n             * @see [Buckets: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/get}\n             *\n             * @method Bucket#getMetadata\n             * @param {GetBucketMetadataOptions} [options] Configuration options.\n             * @param {GetBucketMetadataCallback} [callback] Callback function.\n             * @returns {Promise<GetBucketMetadataResponse>}\n             *\n             * @example\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             *\n             * bucket.getMetadata(function(err, metadata, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.getMetadata().then(function(data) {\n             *   const metadata = data[0];\n             *   const apiResponse = data[1];\n             * });\n             *\n             * @example <caption>include:samples/requesterPays.js</caption>\n             * region_tag:storage_get_requester_pays_status\n             * Example of retrieving the requester pays status of a bucket:\n             */\n            getMetadata: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {object} SetBucketMetadataOptions Configuration options for Bucket#setMetadata().\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * @typedef {array} SetBucketMetadataResponse\n             * @property {object} apiResponse The full API response.\n             */\n            /**\n             * @callback SetBucketMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} metadata The bucket metadata.\n             */\n            /**\n             * Set the bucket's metadata.\n             *\n             * @see [Buckets: patch API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch}\n             *\n             * @method Bucket#setMetadata\n             * @param {object<string, *>} metadata The metadata you wish to set.\n             * @param {SetBucketMetadataOptions} [options] Configuration options.\n             * @param {SetBucketMetadataCallback} [callback] Callback function.\n             * @returns {Promise<SetBucketMetadataResponse>}\n             *\n             * @example\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             *\n             * //-\n             * // Set website metadata field on the bucket.\n             * //-\n             * const metadata = {\n             *   website: {\n             *     mainPageSuffix: 'http://example.com',\n             *     notFoundPage: 'http://example.com/404.html'\n             *   }\n             * };\n             *\n             * bucket.setMetadata(metadata, function(err, apiResponse) {});\n             *\n             * //-\n             * // Enable versioning for your bucket.\n             * //-\n             * bucket.setMetadata({\n             *   versioning: {\n             *     enabled: true\n             *   }\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // Enable KMS encryption for objects within this bucket.\n             * //-\n             * bucket.setMetadata({\n             *   encryption: {\n             *     defaultKmsKeyName: 'projects/grape-spaceship-123/...'\n             *   }\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // Set the default event-based hold value for new objects in this\n             * // bucket.\n             * //-\n             * bucket.setMetadata({\n             *   defaultEventBasedHold: true\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // Remove object lifecycle rules.\n             * //-\n             * bucket.setMetadata({\n             *   lifecycle: null\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.setMetadata(metadata).then(function(data) {\n             *   const apiResponse = data[0];\n             * });\n             */\n            setMetadata: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n        };\n        super({\n            parent: storage,\n            baseUrl: '/b',\n            id: name,\n            createMethod: storage.createBucket.bind(storage),\n            methods,\n        });\n        this.name = name;\n        this.storage = storage;\n        this.userProject = options.userProject;\n        this.acl = new acl_1.Acl({\n            request: this.request.bind(this),\n            pathPrefix: '/acl',\n        });\n        this.acl.default = new acl_1.Acl({\n            request: this.request.bind(this),\n            pathPrefix: '/defaultObjectAcl',\n        });\n        this.iam = new iam_1.Iam(this);\n        this.getFilesStream = paginator_1.paginator.streamify('getFiles');\n    }\n    /**\n     * @typedef {object} AddLifecycleRuleOptions Configuration options for Bucket#addLifecycleRule().\n     * @property {string} [append=true] The new rules will be appended to any\n     *     pre-existing rules.\n     */\n    /**\n     * Add an object lifecycle management rule to the bucket.\n     *\n     * By default, an Object Lifecycle Management rule provided to this method\n     * will be included to the existing policy. To replace all existing rules,\n     * supply the `options` argument, setting `append` to `false`.\n     *\n     * @see [Object Lifecycle Management]{@link https://cloud.google.com/storage/docs/lifecycle}\n     * @see [Buckets: patch API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch}\n     *\n     * @param {LifecycleRule} rule The new lifecycle rule to be added to objects\n     *     in this bucket.\n     * @param {string} [rule.storageClass] When using the `setStorageClass`\n     *     action, provide this option to dictate which storage class the object\n     *     should update to.\n     * @param {AddLifecycleRuleOptions} [options] Configuration object.\n     * @param {boolean} [options.append=true] Append the new rule to the existing\n     *     policy.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Automatically have an object deleted from this bucket once it is 3 years\n     * // of age.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     age: 365 * 3 // Specified in days.\n     *   }\n     * }, function(err, apiResponse) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   const lifecycleRules = bucket.metadata.lifecycle.rule;\n     *\n     *   // Iterate over the Object Lifecycle Management rules on this bucket.\n     *   lifecycleRules.forEach(lifecycleRule => {});\n     * });\n     *\n     * //-\n     * // By default, the rule you provide will be added to the existing policy.\n     * // Optionally, you can disable this behavior to replace all of the\n     * // pre-existing rules.\n     * //-\n     * const options = {\n     *   append: false\n     * };\n     *\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     age: 365 * 3 // Specified in days.\n     *   }\n     * }, options, function(err, apiResponse) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   // All rules have been replaced with the new \"delete\" rule.\n     *\n     *   // Iterate over the Object Lifecycle Management rules on this bucket.\n     *   lifecycleRules.forEach(lifecycleRule => {});\n     * });\n     *\n     * //-\n     * // For objects created before 2018, \"downgrade\" the storage class.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'setStorageClass',\n     *   storageClass: 'COLDLINE',\n     *   condition: {\n     *     createdBefore: new Date('2018')\n     *   }\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete objects created before 2016 which have the Coldline storage\n     * // class.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     matchesStorageClass: [\n     *       'COLDLINE'\n     *     ],\n     *     createdBefore: new Date('2016')\n     *   }\n     * }, function(err, apiResponse) {});\n     */\n    addLifecycleRule(rule, optionsOrCallback, callback) {\n        let options;\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        callback = callback || common_1.util.noop;\n        const newLifecycleRules = arrify(rule).map(rule => {\n            if (typeof rule.action === 'object') {\n                // This is a raw-formatted rule object, the way the API expects.\n                // Just pass it through as-is.\n                return rule;\n            }\n            const apiFormattedRule = {};\n            apiFormattedRule.condition = {};\n            apiFormattedRule.action = {\n                type: rule.action,\n            };\n            // @TODO: Remove if the API becomes less picky.\n            if (rule.action === 'delete') {\n                apiFormattedRule.action.type = 'Delete';\n            }\n            if (rule.storageClass) {\n                apiFormattedRule.action.storageClass = rule.storageClass;\n            }\n            for (const condition in rule.condition) {\n                if (rule.condition[condition] instanceof Date) {\n                    apiFormattedRule.condition[condition] = rule.condition[condition]\n                        .toISOString()\n                        .replace(/T.+$/, '');\n                }\n                else {\n                    apiFormattedRule.condition[condition] = rule.condition[condition];\n                }\n            }\n            return apiFormattedRule;\n        });\n        if (options.append === false) {\n            this.setMetadata({ lifecycle: { rule: newLifecycleRules } }, callback);\n            return;\n        }\n        // The default behavior appends the previously-defined lifecycle rules with\n        // the new ones just passed in by the user.\n        this.getMetadata((err, metadata) => {\n            if (err) {\n                callback(err);\n                return;\n            }\n            const currentLifecycleRules = arrify(metadata.lifecycle && metadata.lifecycle.rule);\n            this.setMetadata({\n                lifecycle: {\n                    rule: currentLifecycleRules.concat(newLifecycleRules),\n                },\n            }, callback);\n        });\n    }\n    /**\n     * @typedef {object} CombineOptions\n     * @property {string} [kmsKeyName] Resource name of the Cloud KMS key, of\n     *     the form\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,\n     *     that will be used to encrypt the object. Overwrites the object\n     * metadata's `kms_key_name` value, if any.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback CombineCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File} newFile The new {@link File}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {array} CombineResponse\n     * @property {File} 0 The new {@link File}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * Combine multiple files into one new file.\n     *\n     * @see [Objects: compose API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objects/compose}\n     *\n     * @throws {Error} if a non-array is provided as sources argument.\n     * @throws {Error} if no sources are provided.\n     * @throws {Error} if no destination is provided.\n     *\n     * @param {string[]|File[]} sources The source files that will be\n     *     combined.\n     * @param {string|File} destination The file you would like the\n     *     source files combined into.\n     * @param {CombineOptions} [options] Configuration options.\n     * @param {CombineCallback} [callback] Callback function.\n     * @returns {Promise<CombineResponse>}\n     *\n     * @example\n     * const logBucket = storage.bucket('log-bucket');\n     *\n     * const sources = [\n     *   logBucket.file('2013-logs.txt'),\n     *   logBucket.file('2014-logs.txt')\n     * ];\n     *\n     * const allLogs = logBucket.file('all-logs.txt');\n     *\n     * logBucket.combine(sources, allLogs, function(err, newFile, apiResponse) {\n     *   // newFile === allLogs\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * logBucket.combine(sources, allLogs).then(function(data) {\n     *   const newFile = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n    combine(sources, destination, optionsOrCallback, callback) {\n        if (!Array.isArray(sources) || sources.length === 0) {\n            throw new Error('You must provide at least one source file.');\n        }\n        if (!destination) {\n            throw new Error('A destination file must be specified.');\n        }\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        const convertToFile = (file) => {\n            if (file instanceof file_1.File) {\n                return file;\n            }\n            return this.file(file);\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        sources = sources.map(convertToFile);\n        const destinationFile = convertToFile(destination);\n        callback = callback || common_1.util.noop;\n        if (!destinationFile.metadata.contentType) {\n            const destinationContentType = mime.contentType(destinationFile.name);\n            if (destinationContentType) {\n                destinationFile.metadata.contentType = destinationContentType;\n            }\n        }\n        // Make the request from the destination File object.\n        destinationFile.request({\n            method: 'POST',\n            uri: '/compose',\n            json: {\n                destination: {\n                    contentType: destinationFile.metadata.contentType,\n                },\n                sourceObjects: sources.map(source => {\n                    const sourceObject = {\n                        name: source.name,\n                    };\n                    if (source.metadata && source.metadata.generation) {\n                        sourceObject.generation = source.metadata.generation;\n                    }\n                    return sourceObject;\n                }),\n            },\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            callback(null, destinationFile, resp);\n        });\n    }\n    /**\n     * See a [Objects:\n     * watchAll request\n     * body](https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll).\n     *\n     * @typedef {object} CreateChannelConfig\n     * @property {string} address The address where notifications are\n     *     delivered for this channel.\n     * @extends WatchAllOptions\n     */\n    /**\n     * @typedef {object} CreateChannelOptions\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @typedef {array} CreateChannelResponse\n     * @property {Channel} 0 The new {@link Channel}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback CreateChannelCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Channel} channel The new {@link Channel}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Create a channel that will be notified when objects in this bucket changes.\n     *\n     * @throws {Error} If an ID is not provided.\n     * @throws {Error} If an address is not provided.\n     *\n     * @see [Objects: watchAll API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll}\n     *\n     * @param {string} id The ID of the channel to create.\n     * @param {CreateChannelConfig} config Configuration for creating channel.\n     * @param {CreateChannelOptions} [options] Configuration options.\n     * @param {CreateChannelCallback} [callback] Callback function.\n     * @returns {Promise<CreateChannelResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     * const id = 'new-channel-id';\n     *\n     * const config = {\n     *   address: 'https://...'\n     * };\n     *\n     * bucket.createChannel(id, config, function(err, channel, apiResponse) {\n     *   if (!err) {\n     *     // Channel created successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.createChannel(id, config).then(function(data) {\n     *   const channel = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n    createChannel(id, config, optionsOrCallback, callback) {\n        if (typeof id !== 'string') {\n            throw new Error('An ID is required to create a channel.');\n        }\n        if (typeof config.address !== 'string') {\n            throw new Error('An address is required to create a channel.');\n        }\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.request({\n            method: 'POST',\n            uri: '/o/watch',\n            json: Object.assign({\n                id,\n                type: 'web_hook',\n            }, config),\n            qs: options,\n        }, (err, apiResponse) => {\n            if (err) {\n                callback(err, null, apiResponse);\n                return;\n            }\n            const resourceId = apiResponse.resourceId;\n            const channel = this.storage.channel(id, resourceId);\n            channel.metadata = apiResponse;\n            callback(null, channel, apiResponse);\n        });\n    }\n    /**\n     * Metadata to set for the Notification.\n     *\n     * @typedef {object} CreateNotificationOptions\n     * @property {object} [customAttributes] An optional list of additional\n     *     attributes to attach to each Cloud PubSub message published for this\n     *     notification subscription.\n     * @property {string[]} [eventTypes] If present, only send notifications about\n     *     listed event types. If empty, sent notifications for all event types.\n     * @property {string} [objectNamePrefix] If present, only apply this\n     *     notification configuration to object names that begin with this prefix.\n     * @property {string} [payloadFormat] The desired content of the Payload.\n     *     Defaults to `JSON_API_V1`.\n     *\n     *     Acceptable values are:\n     *     - `JSON_API_V1`\n     *\n     *     - `NONE`\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback CreateNotificationCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Notification} notification The new {@link Notification}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {array} CreateNotificationResponse\n     * @property {Notification} 0 The new {@link Notification}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * Creates a notification subscription for the bucket.\n     *\n     * @see [Notifications: insert]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert}\n     *\n     * @param {Topic|string} topic The Cloud PubSub topic to which this\n     *     subscription publishes. If the project ID is omitted, the current\n     * project ID will be used.\n     *\n     *     Acceptable formats are:\n     *     - `projects/grape-spaceship-123/topics/my-topic`\n     *\n     *     - `my-topic`\n     * @param {CreateNotificationOptions} [options] Metadata to set for the\n     *     notification.\n     * @param {CreateNotificationCallback} [callback] Callback function.\n     * @returns {Promise<CreateNotificationResponse>}\n     * @throws {Error} If a valid topic is not provided.\n     * @see Notification#create\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const callback = function(err, notification, apiResponse) {\n     *   if (!err) {\n     *     // The notification was created successfully.\n     *   }\n     * };\n     *\n     * myBucket.createNotification('my-topic', callback);\n     *\n     * //-\n     * // Configure the nofiication by providing Notification metadata.\n     * //-\n     * const metadata = {\n     *   objectNamePrefix: 'prefix-'\n     * };\n     *\n     * myBucket.createNotification('my-topic', metadata, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myBucket.createNotification('my-topic').then(function(data) {\n     *   const notification = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * @example <caption>include:samples/notifications.js</caption>\n     * region_tag:storage_create_notification\n     * Another example:\n     */\n    createNotification(topic, optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        const topicIsObject = topic !== null && typeof topic === 'object';\n        if (topicIsObject && common_1.util.isCustomType(topic, 'pubsub/topic')) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            topic = topic.name;\n        }\n        if (typeof topic !== 'string') {\n            throw new Error('A valid topic name is required.');\n        }\n        const body = Object.assign({ topic }, options);\n        if (body.topic.indexOf('projects') !== 0) {\n            body.topic = 'projects/{{projectId}}/topics/' + body.topic;\n        }\n        body.topic = '//pubsub.googleapis.com/' + body.topic;\n        if (!body.payloadFormat) {\n            body.payloadFormat = 'JSON_API_V1';\n        }\n        const query = {};\n        if (body.userProject) {\n            query.userProject = body.userProject;\n            delete body.userProject;\n        }\n        this.request({\n            method: 'POST',\n            uri: '/notificationConfigs',\n            json: snakeize(body),\n            qs: query,\n        }, (err, apiResponse) => {\n            if (err) {\n                callback(err, null, apiResponse);\n                return;\n            }\n            const notification = this.notification(apiResponse.id);\n            notification.metadata = apiResponse;\n            callback(null, notification, apiResponse);\n        });\n    }\n    /**\n     * @typedef {object} DeleteFilesOptions Query object. See {@link Bucket#getFiles}\n     *     for all of the supported properties.\n     * @property {boolean} [force] Suppress errors until all files have been\n     *     processed.\n     */\n    /**\n     * @callback DeleteFilesCallback\n     * @param {?Error|?Error[]} err Request error, if any, or array of errors from\n     *     files that were not able to be deleted.\n     * @param {object} [apiResponse] The full API response.\n     */\n    /**\n     * Iterate over the bucket's files, calling `file.delete()` on each.\n     *\n     * <strong>This is not an atomic request.</strong> A delete attempt will be\n     * made for each file individually. Any one can fail, in which case only a\n     * portion of the files you intended to be deleted would have.\n     *\n     * Operations are performed in parallel, up to 10 at once. The first error\n     * breaks the loop and will execute the provided callback with it. Specify\n     * `{ force: true }` to suppress the errors until all files have had a chance\n     * to be processed.\n     *\n     * The `query` object passed as the first argument will also be passed to\n     * {@link Bucket#getFiles}.\n     *\n     * @see [Objects: delete API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objects/delete}\n     *\n     * @param {DeleteFilesOptions} [query] Query object. See {@link Bucket#getFiles}\n     * @param {DeleteFilesCallback} [callback] Callback function.\n     * @returns {Promise}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Delete all of the files in the bucket.\n     * //-\n     * bucket.deleteFiles(function(err) {});\n     *\n     * //-\n     * // By default, if a file cannot be deleted, this method will stop deleting\n     * // files from your bucket. You can override this setting with `force:\n     * // true`.\n     * //-\n     * bucket.deleteFiles({\n     *   force: true\n     * }, function(errors) {\n     *   // `errors`:\n     *   //    Array of errors if any occurred, otherwise null.\n     * });\n     *\n     * //-\n     * // The first argument to this method acts as a query to\n     * // {@link Bucket#getFiles}. As an example, you can delete files\n     * // which match a prefix.\n     * //-\n     * bucket.deleteFiles({\n     *   prefix: 'images/'\n     * }, function(err) {\n     *   if (!err) {\n     *     // All files in the `images` directory have been deleted.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.deleteFiles().then(function() {});\n     */\n    deleteFiles(queryOrCallback, callback) {\n        let query = {};\n        if (typeof queryOrCallback === 'function') {\n            callback = queryOrCallback;\n        }\n        else if (queryOrCallback) {\n            query = queryOrCallback;\n        }\n        const MAX_PARALLEL_LIMIT = 10;\n        const errors = [];\n        const deleteFile = (file) => {\n            return file.delete(query).catch(err => {\n                if (!query.force) {\n                    throw err;\n                }\n                errors.push(err);\n            });\n        };\n        this.getFiles(query)\n            .then(([files]) => {\n            const limit = pLimit(MAX_PARALLEL_LIMIT);\n            const promises = files.map(file => {\n                return limit(() => deleteFile(file));\n            });\n            return Promise.all(promises);\n        })\n            .then(() => callback(errors.length > 0 ? errors : null), callback);\n    }\n    /**\n     * @typedef {array} DeleteLabelsResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback DeleteLabelsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} metadata Bucket's metadata.\n     */\n    /**\n     * Delete one or more labels from this bucket.\n     *\n     * @param {string|string[]} labels The labels to delete. If no labels are\n     *     provided, all of the labels are removed.\n     * @param {DeleteLabelsCallback} [callback] Callback function.\n     * @returns {Promise<DeleteLabelsResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Delete all of the labels from this bucket.\n     * //-\n     * bucket.deleteLabels(function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete a single label.\n     * //-\n     * bucket.deleteLabels('labelone', function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete a specific set of labels.\n     * //-\n     * bucket.deleteLabels([\n     *   'labelone',\n     *   'labeltwo'\n     * ], function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.deleteLabels().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     */\n    deleteLabels(labelsOrCallback, callback) {\n        let labels = new Array();\n        if (typeof labelsOrCallback === 'function') {\n            callback = labelsOrCallback;\n        }\n        else if (labelsOrCallback) {\n            labels = arrify(labelsOrCallback);\n        }\n        const deleteLabels = (labels) => {\n            const nullLabelMap = labels.reduce((nullLabelMap, labelKey) => {\n                nullLabelMap[labelKey] = null;\n                return nullLabelMap;\n            }, {});\n            this.setLabels(nullLabelMap, callback);\n        };\n        if (labels.length === 0) {\n            this.getLabels((err, labels) => {\n                if (err) {\n                    callback(err);\n                    return;\n                }\n                deleteLabels(Object.keys(labels));\n            });\n        }\n        else {\n            deleteLabels(labels);\n        }\n    }\n    /**\n     * @typedef {array} DisableRequesterPaysResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback DisableRequesterPaysCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * <div class=\"notice\">\n     *   <strong>Early Access Testers Only</strong>\n     *   <p>\n     *     This feature is not yet widely-available.\n     *   </p>\n     * </div>\n     *\n     * Disable `requesterPays` functionality from this bucket.\n     *\n     * @param {DisableRequesterPaysCallback} [callback] Callback function.\n     * @returns {Promise<DisableRequesterPaysCallback>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.disableRequesterPays(function(err, apiResponse) {\n     *   if (!err) {\n     *     // requesterPays functionality disabled successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.disableRequesterPays().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     *\n     * @example <caption>include:samples/requesterPays.js</caption>\n     * region_tag:storage_disable_requester_pays\n     * Example of disabling requester pays:\n     */\n    disableRequesterPays(callback) {\n        this.setMetadata({\n            billing: {\n                requesterPays: false,\n            },\n        }, callback || common_1.util.noop);\n    }\n    /**\n     * Configuration object for enabling logging.\n     *\n     * @typedef {object} EnableLoggingOptions\n     * @property {string|Bucket} [bucket] The bucket for the log entries. By\n     *     default, the current bucket is used.\n     * @property {string} prefix A unique prefix for log object names.\n     */\n    /**\n     * Enable logging functionality for this bucket. This will make two API\n     * requests, first to grant Cloud Storage WRITE permission to the bucket, then\n     * to set the appropriate configuration on the Bucket's metadata.\n     *\n     * @param {EnableLoggingOptions} config Configuration options.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * const config = {\n     *   prefix: 'log'\n     * };\n     *\n     * bucket.enableLogging(config, function(err, apiResponse) {\n     *   if (!err) {\n     *     // Logging functionality enabled successfully.\n     *   }\n     * });\n     *\n     * @example <caption>Optionally, provide a destination bucket.</caption>\n     * const config = {\n     *   prefix: 'log',\n     *   bucket: 'destination-bucket'\n     * };\n     *\n     * bucket.enableLogging(config, function(err, apiResponse) {});\n     *\n     * @example <caption>If the callback is omitted, we'll return a Promise.</caption>\n     * bucket.enableLogging(config).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     */\n    enableLogging(config, callback) {\n        if (!config ||\n            typeof config === 'function' ||\n            typeof config.prefix === 'undefined') {\n            throw new Error('A configuration object with a prefix is required.');\n        }\n        const logBucket = config.bucket\n            ? config.bucket.id || config.bucket\n            : this.id;\n        (async () => {\n            let setMetadataResponse;\n            try {\n                const [policy] = await this.iam.getPolicy();\n                policy.bindings.push({\n                    members: ['group:cloud-storage-analytics@google.com'],\n                    role: 'roles/storage.objectCreator',\n                });\n                await this.iam.setPolicy(policy);\n                [setMetadataResponse] = await this.setMetadata({\n                    logging: {\n                        logBucket,\n                        logObjectPrefix: config.prefix,\n                    },\n                });\n            }\n            catch (e) {\n                callback(e);\n                return;\n            }\n            callback(null, setMetadataResponse);\n        })();\n    }\n    /**\n     * @typedef {array} EnableRequesterPaysResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback EnableRequesterPaysCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * <div class=\"notice\">\n     *   <strong>Early Access Testers Only</strong>\n     *   <p>\n     *     This feature is not yet widely-available.\n     *   </p>\n     * </div>\n     *\n     * Enable `requesterPays` functionality for this bucket. This enables you, the\n     * bucket owner, to have the requesting user assume the charges for the access\n     * to your bucket and its contents.\n     *\n     * @param {EnableRequesterPaysCallback} [callback] Callback function.\n     * @returns {Promise<EnableRequesterPaysResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.enableRequesterPays(function(err, apiResponse) {\n     *   if (!err) {\n     *     // requesterPays functionality enabled successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.enableRequesterPays().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     *\n     * @example <caption>include:samples/requesterPays.js</caption>\n     * region_tag:storage_enable_requester_pays\n     * Example of enabling requester pays:\n     */\n    enableRequesterPays(callback) {\n        this.setMetadata({\n            billing: {\n                requesterPays: true,\n            },\n        }, callback || common_1.util.noop);\n    }\n    /**\n     * Create a {@link File} object. See {@link File} to see how to handle\n     * the different use cases you may have.\n     *\n     * @param {string} name The name of the file in this bucket.\n     * @param {object} [options] Configuration options.\n     * @param {string|number} [options.generation] Only use a specific revision of\n     *     this file.\n     * @param {string} [options.encryptionKey] A custom encryption key. See\n     *     [Customer-supplied Encryption\n     * Keys](https://cloud.google.com/storage/docs/encryption#customer-supplied).\n     * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will\n     *     be used to encrypt the object. Must be in the format:\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n     *     KMS key ring must use the same location as the bucket.\n     * @returns {File}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     * const file = bucket.file('my-existing-file.png');\n     */\n    file(name, options) {\n        if (!name) {\n            throw Error('A file name must be specified.');\n        }\n        return new file_1.File(this, name, options);\n    }\n    /**\n     * @typedef {array} GetFilesResponse\n     * @property {File[]} 0 Array of {@link File} instances.\n     */\n    /**\n     * @callback GetFilesCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files Array of {@link File} instances.\n     */\n    /**\n     * Query object for listing files.\n     *\n     * @typedef {object} GetFilesOptions\n     * @property {boolean} [autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @property {string} [delimiter] Results will contain only objects whose\n     *     names, aside from the prefix, do not contain delimiter. Objects whose\n     *     names, aside from the prefix, contain delimiter will have their name\n     *     truncated after the delimiter, returned in `apiResponse.prefixes`.\n     *     Duplicate prefixes are omitted.\n     * @property {string} [directory] Filter results based on a directory name, or\n     *     more technically, a \"prefix\".\n     * @property {string} [prefix] Filter results to objects whose names begin\n     *     with this prefix.\n     * @property {number} [maxApiCalls] Maximum number of API calls to make.\n     * @property {number} [maxResults] Maximum number of items plus prefixes to\n     *     return.\n     * @property {string} [pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {boolean} [versions] If true, returns File objects scoped to\n     *     their versions.\n     */\n    /**\n     * Get {@link File} objects for the files currently in the bucket.\n     *\n     * @see [Objects: list API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objects/list}\n     *\n     * @param {GetFilesOptions} [query] Query object for listing files.\n     * @param {GetFilesCallback} [callback] Callback function.\n     * @returns {Promise<GetFilesResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.getFiles(function(err, files) {\n     *   if (!err) {\n     *     // files is an array of File objects.\n     *   }\n     * });\n     *\n     * //-\n     * // If your bucket has versioning enabled, you can get all of your files\n     * // scoped to their generation.\n     * //-\n     * bucket.getFiles({\n     *   versions: true\n     * }, function(err, files) {\n     *   // Each file is scoped to its generation.\n     * });\n     *\n     * //-\n     * // To control how many API requests are made and page through the results\n     * // manually, set `autoPaginate` to `false`.\n     * //-\n     * const callback = function(err, files, nextQuery, apiResponse) {\n     *   if (nextQuery) {\n     *     // More results exist.\n     *     bucket.getFiles(nextQuery, callback);\n     *   }\n     *\n     *   // The `metadata` property is populated for you with the metadata at the\n     *   // time of fetching.\n     *   files[0].metadata;\n     *\n     *   // However, in cases where you are concerned the metadata could have\n     *   // changed, use the `getMetadata` method.\n     *   files[0].getMetadata(function(err, metadata) {});\n     * };\n     *\n     * bucket.getFiles({\n     *   autoPaginate: false\n     * }, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getFiles().then(function(data) {\n     *   const files = data[0];\n     * });\n     *\n     * @example <caption><h6>Simulating a File System</h6><p>With `autoPaginate: false`, it's possible to iterate over files which incorporate a common structure using a delimiter.</p><p>Consider the following remote objects:</p><ol><li>\"a\"</li><li>\"a/b/c/d\"</li><li>\"b/d/e\"</li></ol><p>Using a delimiter of `/` will return a single file, \"a\".</p><p>`apiResponse.prefixes` will return the \"sub-directories\" that were found:</p><ol><li>\"a/\"</li><li>\"b/\"</li></ol></caption>\n     * bucket.getFiles({\n     *   autoPaginate: false,\n     *   delimiter: '/'\n     * }, function(err, files, nextQuery, apiResponse) {\n     *   // files = [\n     *   //   {File} // File object for file \"a\"\n     *   // ]\n     *\n     *   // apiResponse.prefixes = [\n     *   //   'a/',\n     *   //   'b/'\n     *   // ]\n     * });\n     *\n     * @example <caption>Using prefixes, it's now possible to simulate a file system with follow-up requests.</caption>\n     * bucket.getFiles({\n     *   autoPaginate: false,\n     *   delimiter: '/',\n     *   prefix: 'a/'\n     * }, function(err, files, nextQuery, apiResponse) {\n     *   // No files found within \"directory\" a.\n     *   // files = []\n     *\n     *   // However, a \"sub-directory\" was found.\n     *   // This prefix can be used to continue traversing the \"file system\".\n     *   // apiResponse.prefixes = [\n     *   //   'a/b/'\n     *   // ]\n     * });\n     *\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_list_files\n     * Another example:\n     *\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_list_files_with_prefix\n     * Example of listing files, filtered by a prefix:\n     */\n    getFiles(queryOrCallback, callback) {\n        let query = typeof queryOrCallback === 'object' ? queryOrCallback : {};\n        if (!callback) {\n            callback = queryOrCallback;\n        }\n        query = Object.assign({}, query);\n        if (query.directory) {\n            query.prefix = `${query.directory}/`.replace(/\\/*$/, '/');\n            delete query.directory;\n        }\n        this.request({\n            uri: '/o',\n            qs: query,\n        }, (err, resp) => {\n            if (err) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                callback(err, null, null, resp);\n                return;\n            }\n            const files = arrify(resp.items).map((file) => {\n                const options = {};\n                if (query.versions) {\n                    options.generation = file.generation;\n                }\n                if (file.kmsKeyName) {\n                    options.kmsKeyName = file.kmsKeyName;\n                }\n                const fileInstance = this.file(file.name, options);\n                fileInstance.metadata = file;\n                return fileInstance;\n            });\n            let nextQuery = null;\n            if (resp.nextPageToken) {\n                nextQuery = Object.assign({}, query, {\n                    pageToken: resp.nextPageToken,\n                });\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            callback(null, files, nextQuery, resp);\n        });\n    }\n    /**\n     * @typedef {object} GetLabelsOptions Configuration options for Bucket#getLabels().\n     * @param {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @typedef {array} GetLabelsResponse\n     * @property {object} 0 Object of labels currently set on this bucket.\n     */\n    /**\n     * @callback GetLabelsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} labels Object of labels currently set on this bucket.\n     */\n    /**\n     * Get the labels currently set on this bucket.\n     *\n     * @param {object} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {GetLabelsCallback} [callback] Callback function.\n     * @returns {Promise<GetLabelsCallback>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.getLabels(function(err, labels) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   // labels = {\n     *   //   label: 'labelValue',\n     *   //   ...\n     *   // }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getLabels().then(function(data) {\n     *   const labels = data[0];\n     * });\n     */\n    getLabels(optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.getMetadata(options, (err, metadata) => {\n            if (err) {\n                callback(err, null);\n                return;\n            }\n            callback(null, metadata.labels || {});\n        });\n    }\n    /**\n     * @typedef {object} GetNotificationOptions Configuration options for Bucket#getNotification().\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback GetNotificationsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Notification[]} notifications Array of {@link Notification}\n     *     instances.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {array} GetNotificationsResponse\n     * @property {Notification[]} 0 Array of {@link Notification} instances.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * Retrieves a list of notification subscriptions for a given bucket.\n     *\n     * @see [Notifications: list]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/list}\n     *\n     * @param {GetNotificationsOptions} [options] Configuration options.\n     * @param {GetNotificationsCallback} [callback] Callback function.\n     * @returns {Promise<GetNotificationsResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * bucket.getNotifications(function(err, notifications, apiResponse) {\n     *   if (!err) {\n     *     // notifications is an array of Notification objects.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getNotifications().then(function(data) {\n     *   const notifications = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * @example <caption>include:samples/notifications.js</caption>\n     * region_tag:storage_list_notifications\n     * Another example:\n     */\n    getNotifications(optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.request({\n            uri: '/notificationConfigs',\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            const notifications = arrify(resp.items).map((notification) => {\n                const notificationInstance = this.notification(notification.id);\n                notificationInstance.metadata = notification;\n                return notificationInstance;\n            });\n            callback(null, notifications, resp);\n        });\n    }\n    /**\n     * @typedef {array} GetSignedUrlResponse\n     * @property {object} 0 The signed URL.\n     */\n    /**\n     * @callback GetSignedUrlCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} url The signed URL.\n     */\n    /**\n     * @typedef {object} GetBucketSignedUrlConfig\n     * @property {string} action Currently only supports \"list\" (HTTP: GET).\n     * @property {*} expires A timestamp when this link will expire. Any value\n     *     given is passed to `new Date()`.\n     *     Note: 'v4' supports maximum duration of 7 days (604800 seconds) from now.\n     * @property {string} [version='v2'] The signing version to use, either\n     *     'v2' or 'v4'.\n     * @param {boolean} [virtualHostedStyle=false] Use virtual hosted-style\n     *     URLs ('https://mybucket.storage.googleapis.com/...') instead of path-style\n     *     ('https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\n     *     should generally be preferred instaed of path-style URL.\n     *     Currently defaults to `false` for path-style, although this may change in a\n     *     future major-version release.\n     * @property {string} [cname] The cname for this bucket, i.e.,\n     *     \"https://cdn.example.com\".\n     *     See [reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls#example}\n     * @property {object} [extensionHeaders] If these headers are used, the\n     *     server will check to make sure that the client provides matching\n     * values. See [Canonical extension\n     * headers](https://cloud.google.com/storage/docs/access-control/signed-urls#about-canonical-extension-headers)\n     *     for the requirements of this feature, most notably:\n     *       - The header name must be prefixed with `x-goog-`\n     *       - The header name must be all lowercase\n     *     Note: Multi-valued header passed as an array in the extensionHeaders\n     *           object is converted into a string, delimited by `,` with\n     *           no space. Requests made using the signed URL will need to\n     *           delimit multi-valued headers using a single `,` as well, or\n     *           else the server will report a mismatched signature.\n     * @param {object} [config.queryParams] Additional query parameters to include\n     *     in the signed URL.\n     */\n    /**\n     * Get a signed URL to allow limited time access to a bucket.\n     *\n     * In Google Cloud Platform environments, such as Cloud Functions and App\n     * Engine, you usually don't provide a `keyFilename` or `credentials` during\n     * instantiation. In those environments, we call the\n     * [signBlob\n     * API](https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob)\n     * to create a signed URL. That API requires either the\n     * `https://www.googleapis.com/auth/iam` or\n     * `https://www.googleapis.com/auth/cloud-platform` scope, so be sure they are\n     * enabled.\n     *\n     * @see [Signed URLs Reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls}\n     *\n     * @throws {Error} if an expiration timestamp from the past is given.\n     *\n     * @param {GetBucketSignedUrlConfig} config Configuration object.\n     * @param {GetSignedUrlCallback} [callback] Callback function.\n     * @returns {Promise<GetSignedUrlResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * //-\n     * // Generate a URL that allows temporary access to list files in a bucket.\n     * //-\n     * const request = require('request');\n     *\n     * const config = {\n     *   action: 'list',\n     *   expires: '03-17-2025'\n     * };\n     *\n     * bucket.getSignedUrl(config, function(err, url) {\n     *   if (err) {\n     *     console.error(err);\n     *     return;\n     *   }\n     *\n     *   // The bucket is now available to be listed from this URL.\n     *   request(url, function(err, resp) {\n     *     // resp.statusCode = 200\n     *   });\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getSignedUrl(config).then(function(data) {\n     *   const url = data[0];\n     * });\n     */\n    getSignedUrl(cfg, callback) {\n        const method = BucketActionToHTTPMethod[cfg.action];\n        if (!method) {\n            throw new Error('The action is not provided or invalid.');\n        }\n        const signConfig = {\n            method,\n            expires: cfg.expires,\n            version: cfg.version,\n            cname: cfg.cname,\n            extensionHeaders: cfg.extensionHeaders || {},\n            queryParams: cfg.queryParams || {},\n        };\n        if (!this.signer) {\n            this.signer = new signer_1.URLSigner(this.storage.authClient, this);\n        }\n        this.signer\n            .getSignedUrl(signConfig)\n            .then(signedUrl => callback(null, signedUrl), callback);\n    }\n    /**\n     * @callback BucketLockCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Lock a previously-defined retention policy. This will prevent changes to\n     * the policy.\n     *\n     * @throws {Error} if a metageneration is not provided.\n     *\n     * @param {Number|String} metageneration The bucket's metageneration. This is\n     *     accesssible from calling {@link File#getMetadata}.\n     * @param {BucketLockCallback} [callback] Callback function.\n     * @returns {Promise<BucketLockResponse>}\n     *\n     * @example\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * const metageneration = 2;\n     *\n     * bucket.lock(metageneration, function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.lock(metageneration).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     */\n    lock(metageneration, callback) {\n        const metatype = typeof metageneration;\n        if (metatype !== 'number' && metatype !== 'string') {\n            throw new Error('A metageneration must be provided.');\n        }\n        this.request({\n            method: 'POST',\n            uri: '/lockRetentionPolicy',\n            qs: {\n                ifMetagenerationMatch: metageneration,\n            },\n        }, callback);\n    }\n    /**\n     * @typedef {array} MakeBucketPrivateResponse\n     * @property {File[]} 0 List of files made private.\n     */\n    /**\n     * @callback MakeBucketPrivateCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files List of files made private.\n     */\n    /**\n     * @typedef {object} MakeBucketPrivateOptions\n     * @param {boolean} [includeFiles=false] Make each file in the bucket\n     *     private.\n     * @param {boolean} [force] Queue errors occurred while making files\n     *     private until all files have been processed.\n     * @param {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * Make the bucket listing private.\n     *\n     * You may also choose to make the contents of the bucket private by\n     * specifying `includeFiles: true`. This will automatically run\n     * {@link File#makePrivate} for every file in the bucket.\n     *\n     * When specifying `includeFiles: true`, use `force: true` to delay execution\n     * of your callback until all files have been processed. By default, the\n     * callback is executed after the first error. Use `force` to queue such\n     * errors until all files have been processed, after which they will be\n     * returned as an array as the first argument to your callback.\n     *\n     * NOTE: This may cause the process to be long-running and use a high number\n     * of requests. Use with caution.\n     *\n     * @see [Buckets: patch API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch}\n     *\n     * @param {MakeBucketPrivateOptions} [options] Configuration options.\n     * @param {MakeBucketPrivateCallback} [callback] Callback function.\n     * @returns {Promise<MakeBucketPrivateResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Make the bucket private.\n     * //-\n     * bucket.makePrivate(function(err) {});\n     *\n     * //-\n     * // Make the bucket and its contents private.\n     * //-\n     * const opts = {\n     *   includeFiles: true\n     * };\n     *\n     * bucket.makePrivate(opts, function(err, files) {\n     *   // `err`:\n     *   //    The first error to occur, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made private in the bucket.\n     * });\n     *\n     * //-\n     * // Make the bucket and its contents private, using force to suppress errors\n     * // until all files have been processed.\n     * //-\n     * const opts = {\n     *   includeFiles: true,\n     *   force: true\n     * };\n     *\n     * bucket.makePrivate(opts, function(errors, files) {\n     *   // `errors`:\n     *   //    Array of errors if any occurred, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made private in the bucket.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.makePrivate(opts).then(function(data) {\n     *   const files = data[0];\n     * });\n     */\n    makePrivate(optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        options.private = true;\n        const query = {\n            predefinedAcl: 'projectPrivate',\n        };\n        if (options.userProject) {\n            query.userProject = options.userProject;\n        }\n        this.setMetadata({\n            // You aren't allowed to set both predefinedAcl & acl properties on\n            // a bucket so acl must explicitly be nullified.\n            acl: null,\n        }, query)\n            .then(() => {\n            if (options.includeFiles) {\n                return util_1.promisify(this.makeAllFilesPublicPrivate_).call(this, options);\n            }\n            return [];\n        })\n            .then(files => callback(null, files), callback);\n    }\n    /**\n     * @typedef {object} MakeBucketPublicOptions\n     * @param {boolean} [includeFiles=false] Make each file in the bucket\n     *     private.\n     * @param {boolean} [force] Queue errors occurred while making files\n     *     private until all files have been processed.\n     */\n    /**\n     * @callback MakeBucketPublicCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files List of files made public.\n     */\n    /**\n     * @typedef {array} MakeBucketPublicResponse\n     * @property {File[]} 0 List of files made public.\n     */\n    /**\n     * Make the bucket publicly readable.\n     *\n     * You may also choose to make the contents of the bucket publicly readable by\n     * specifying `includeFiles: true`. This will automatically run\n     * {@link File#makePublic} for every file in the bucket.\n     *\n     * When specifying `includeFiles: true`, use `force: true` to delay execution\n     * of your callback until all files have been processed. By default, the\n     * callback is executed after the first error. Use `force` to queue such\n     * errors until all files have been processed, after which they will be\n     * returned as an array as the first argument to your callback.\n     *\n     * NOTE: This may cause the process to be long-running and use a high number\n     * of requests. Use with caution.\n     *\n     * @see [Buckets: patch API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch}\n     *\n     * @param {MakeBucketPublicOptions} [options] Configuration options.\n     * @param {MakeBucketPublicCallback} [callback] Callback function.\n     * @returns {Promise<MakeBucketPublicResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Make the bucket publicly readable.\n     * //-\n     * bucket.makePublic(function(err) {});\n     *\n     * //-\n     * // Make the bucket and its contents publicly readable.\n     * //-\n     * const opts = {\n     *   includeFiles: true\n     * };\n     *\n     * bucket.makePublic(opts, function(err, files) {\n     *   // `err`:\n     *   //    The first error to occur, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made public in the bucket.\n     * });\n     *\n     * //-\n     * // Make the bucket and its contents publicly readable, using force to\n     * // suppress errors until all files have been processed.\n     * //-\n     * const opts = {\n     *   includeFiles: true,\n     *   force: true\n     * };\n     *\n     * bucket.makePublic(opts, function(errors, files) {\n     *   // `errors`:\n     *   //    Array of errors if any occurred, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made public in the bucket.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.makePublic(opts).then(function(data) {\n     *   const files = data[0];\n     * });\n     */\n    makePublic(optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const req = extend(true, { public: true }, options);\n        this.acl\n            .add({\n            entity: 'allUsers',\n            role: 'READER',\n        })\n            .then(() => {\n            return this.acl.default.add({\n                entity: 'allUsers',\n                role: 'READER',\n            });\n        })\n            .then(() => {\n            if (req.includeFiles) {\n                return util_1.promisify(this.makeAllFilesPublicPrivate_).call(this, req);\n            }\n            return [];\n        })\n            .then(files => callback(null, files), callback);\n    }\n    /**\n     * Get a reference to a Cloud Pub/Sub Notification.\n     *\n     * @param {string} id ID of notification.\n     * @returns {Notification}\n     * @see Notification\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     * const notification = bucket.notification('1');\n     */\n    notification(id) {\n        if (!id) {\n            throw new Error('You must supply a notification ID.');\n        }\n        return new notification_1.Notification(this, id);\n    }\n    /**\n     * Remove an already-existing retention policy from this bucket, if it is not\n     * locked.\n     *\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.removeRetentionPeriod(function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.removeRetentionPeriod().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     */\n    removeRetentionPeriod(callback) {\n        this.setMetadata({\n            retentionPolicy: null,\n        }, callback);\n    }\n    /**\n     * Makes request and applies userProject query parameter if necessary.\n     *\n     * @private\n     *\n     * @param {object} reqOpts - The request options.\n     * @param {function} callback - The callback function.\n     */\n    request(reqOpts, callback) {\n        if (this.userProject && (!reqOpts.qs || !reqOpts.qs.userProject)) {\n            reqOpts.qs = extend(reqOpts.qs, { userProject: this.userProject });\n        }\n        return super.request(reqOpts, callback);\n    }\n    /**\n     * @typedef {array} SetLabelsResponse\n     * @property {object} 0 The bucket metadata.\n     */\n    /**\n     * @callback SetLabelsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} metadata The bucket metadata.\n     */\n    /**\n     * @typedef {object} SetLabelsOptions Configuration options for Bucket#setLabels().\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * Set labels on the bucket.\n     *\n     * This makes an underlying call to {@link Bucket#setMetadata}, which\n     * is a PATCH request. This means an individual label can be overwritten, but\n     * unmentioned labels will not be touched.\n     *\n     * @param {object<string, string>} labels Labels to set on the bucket.\n     * @param {object} [options] Configuration options.\n     * @param {SetLabelsCallback} [callback] Callback function.\n     * @returns {Promise<SetLabelsResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * const labels = {\n     *   labelone: 'labelonevalue',\n     *   labeltwo: 'labeltwovalue'\n     * };\n     *\n     * bucket.setLabels(labels, function(err, metadata) {\n     *   if (!err) {\n     *     // Labels set successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setLabels(labels).then(function(data) {\n     *   const metadata = data[0];\n     * });\n     */\n    setLabels(labels, optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        callback = callback || common_1.util.noop;\n        this.setMetadata({ labels }, options, callback);\n    }\n    /**\n     * Lock all objects contained in the bucket, based on their creation time. Any\n     * attempt to overwrite or delete objects younger than the retention period\n     * will result in a `PERMISSION_DENIED` error.\n     *\n     * An unlocked retention policy can be modified or removed from the bucket via\n     * {@link File#removeRetentionPeriod} and {@link File#setRetentionPeriod}. A\n     * locked retention policy cannot be removed or shortened in duration for the\n     * lifetime of the bucket. Attempting to remove or decrease period of a locked\n     * retention policy will result in a `PERMISSION_DENIED` error. You can still\n     * increase the policy.\n     *\n     * @param {*} duration In seconds, the minimum retention time for all objects\n     *     contained in this bucket.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * const DURATION_SECONDS = 15780000; // 6 months.\n     *\n     * //-\n     * // Lock the objects in this bucket for 6 months.\n     * //-\n     * bucket.setRetentionPeriod(DURATION_SECONDS, function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setRetentionPeriod(DURATION_SECONDS).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     */\n    setRetentionPeriod(duration, callback) {\n        this.setMetadata({\n            retentionPolicy: {\n                retentionPeriod: duration,\n            },\n        }, callback);\n    }\n    /**\n     * This can be used to set the CORS configuration on the bucket.\n     *\n     * The configuration will be overwritten with the value passed into this.\n     *\n     * @param {Cors[]} corsConfiguration The new CORS configuration to set\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * const corsConfiguration = [{maxAgeSeconds: 3600}]; // 1 hour\n     * bucket.setCorsConfiguration(corsConfiguration);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setCorsConfiguration(corsConfiguration).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     */\n    setCorsConfiguration(corsConfiguration, callback) {\n        this.setMetadata({\n            cors: corsConfiguration,\n        }, callback);\n    }\n    /**\n     * @typedef {object} SetBucketStorageClassOptions\n     * @param {string} [userProject] - The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback SetBucketStorageClassCallback\n     * @param {?Error} err Request error, if any.\n     */\n    /**\n     * Set the default storage class for new files in this bucket.\n     *\n     * @see [Storage Classes]{@link https://cloud.google.com/storage/docs/storage-classes}\n     *\n     * @param {string} storageClass The new storage class. (`standard`,\n     *     `nearline`, `coldline`, or `archive`).\n     *     **Note:** The storage classes `multi_regional`, `regional`, and\n     *     `durable_reduced_availability` are now legacy and will be deprecated in\n     *     the future.\n     * @param {object} [options] Configuration options.\n     * @param {string} [options.userProject] - The ID of the project which will be\n     *     billed for the request.\n     * @param {SetStorageClassCallback} [callback] Callback function.\n     * @returns {Promise}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.setStorageClass('nearline', function(err, apiResponse) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   // The storage class was updated successfully.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setStorageClass('nearline').then(function() {});\n     */\n    setStorageClass(storageClass, optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        // In case we get input like `storageClass`, convert to `storage_class`.\n        storageClass = storageClass\n            .replace(/-/g, '_')\n            .replace(/([a-z])([A-Z])/g, (_, low, up) => {\n            return low + '_' + up;\n        })\n            .toUpperCase();\n        this.setMetadata({ storageClass }, options, callback);\n    }\n    /**\n     * Set a user project to be billed for all requests made from this Bucket\n     * object and any files referenced from this Bucket object.\n     *\n     * @param {string} userProject The user project.\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.setUserProject('grape-spaceship-123');\n     */\n    setUserProject(userProject) {\n        this.userProject = userProject;\n        const methods = [\n            'create',\n            'delete',\n            'exists',\n            'get',\n            'getMetadata',\n            'setMetadata',\n        ];\n        methods.forEach(method => {\n            const methodConfig = this.methods[method];\n            if (typeof methodConfig === 'object') {\n                if (typeof methodConfig.reqOpts === 'object') {\n                    extend(methodConfig.reqOpts.qs, { userProject });\n                }\n                else {\n                    methodConfig.reqOpts = {\n                        qs: { userProject },\n                    };\n                }\n            }\n        });\n    }\n    /**\n     * @typedef {object} UploadOptions Configuration options for Bucket#upload().\n     * @param {string|File} [options.destination] The place to save\n     *     your file. If given a string, the file will be uploaded to the bucket\n     *     using the string as a filename. When given a File object, your local\n     * file will be uploaded to the File object's bucket and under the File\n     * object's name. Lastly, when this argument is omitted, the file is uploaded\n     * to your bucket using the name of the local file.\n     * @param {string} [options.encryptionKey] A custom encryption key. See\n     *     [Customer-supplied Encryption\n     * Keys](https://cloud.google.com/storage/docs/encryption#customer-supplied).\n     * @param {boolean} [options.gzip] Automatically gzip the file. This will set\n     *     `options.metadata.contentEncoding` to `gzip`.\n     * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will\n     *     be used to encrypt the object. Must be in the format:\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n     * @param {object} [options.metadata] See an\n     *     [Objects: insert request\n     * body](https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON).\n     * @param {string} [options.offset] The starting byte of the upload stream, for\n     *     resuming an interrupted upload. Defaults to 0.\n     * @param {string} [options.predefinedAcl] Apply a predefined set of access\n     *     controls to this object.\n     *\n     *     Acceptable values are:\n     *     - **`authenticatedRead`** - Object owner gets `OWNER` access, and\n     *       `allAuthenticatedUsers` get `READER` access.\n     *\n     *     - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\n     *       project team owners get `OWNER` access.\n     *\n     *     - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\n     *       team owners get `READER` access.\n     *\n     *     - **`private`** - Object owner gets `OWNER` access.\n     *\n     *     - **`projectPrivate`** - Object owner gets `OWNER` access, and project\n     *       team members get access according to their roles.\n     *\n     *     - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\n     * get `READER` access.\n     * @param {boolean} [options.private] Make the uploaded file private. (Alias for\n     *     `options.predefinedAcl = 'private'`)\n     * @param {boolean} [options.public] Make the uploaded file public. (Alias for\n     *     `options.predefinedAcl = 'publicRead'`)\n     * @param {boolean} [options.resumable] Force a resumable upload. (default:\n     *     true for files larger than 5 MB).\n     * @param {number} [options.timeout=60000] Set the HTTP request timeout in\n     *     milliseconds. This option is not available for resumable uploads.\n     *     Default: `60000`\n     * @param {string} [options.uri] The URI for an already-created resumable\n     *     upload. See {@link File#createResumableUpload}.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {string|boolean} [options.validation] Possible values: `\"md5\"`,\n     *     `\"crc32c\"`, or `false`. By default, data integrity is validated with an\n     *     MD5 checksum for maximum reliability. CRC32c will provide better\n     *     performance with less reliability. You may also choose to skip\n     * validation completely, however this is **not recommended**.\n     */\n    /**\n     * @typedef {array} UploadResponse\n     * @property {object} 0 The uploaded {@link File}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback UploadCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} file The uploaded {@link File}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Upload a file to the bucket. This is a convenience method that wraps\n     * {@link File#createWriteStream}.\n     *\n     * You can specify whether or not an upload is resumable by setting\n     * `options.resumable`. *Resumable uploads are enabled by default if your\n     * input file is larger than 5 MB.*\n     *\n     * For faster crc32c computation, you must manually install\n     * [`fast-crc32c`](https://www.npmjs.com/package/fast-crc32c):\n     *\n     *     $ npm install --save fast-crc32c\n     *\n     * @see [Upload Options (Simple or Resumable)]{@link https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload#uploads}\n     * @see [Objects: insert API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert}\n     *\n     * @param {string} pathString The fully qualified path to the file you\n     *     wish to upload to your bucket.\n     * @param {UploadOptions} [options] Configuration options.\n     * @param {UploadCallback} [callback] Callback function.\n     * @returns {Promise<UploadResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Upload a file from a local path.\n     * //-\n     * bucket.upload('/local/path/image.png', function(err, file, apiResponse) {\n     *   // Your bucket now contains:\n     *   // - \"image.png\" (with the contents of `/local/path/image.png')\n     *\n     *   // `file` is an instance of a File object that refers to your new file.\n     * });\n     *\n     *\n     * //-\n     * // It's not always that easy. You will likely want to specify the filename\n     * // used when your new file lands in your bucket.\n     * //\n     * // You may also want to set metadata or customize other options.\n     * //-\n     * const options = {\n     *   destination: 'new-image.png',\n     *   resumable: true,\n     *   validation: 'crc32c',\n     *   metadata: {\n     *     metadata: {\n     *       event: 'Fall trip to the zoo'\n     *     }\n     *   }\n     * };\n     *\n     * bucket.upload('local-image.png', options, function(err, file) {\n     *   // Your bucket now contains:\n     *   // - \"new-image.png\" (with the contents of `local-image.png')\n     *\n     *   // `file` is an instance of a File object that refers to your new file.\n     * });\n     *\n     * //-\n     * // You can also have a file gzip'd on the fly.\n     * //-\n     * bucket.upload('index.html', { gzip: true }, function(err, file) {\n     *   // Your bucket now contains:\n     *   // - \"index.html\" (automatically compressed with gzip)\n     *\n     *   // Downloading the file with `file.download` will automatically decode\n     * the\n     *   // file.\n     * });\n     *\n     * //-\n     * // You may also re-use a File object, {File}, that references\n     * // the file you wish to create or overwrite.\n     * //-\n     * const options = {\n     *   destination: bucket.file('existing-file.png'),\n     *   resumable: false\n     * };\n     *\n     * bucket.upload('local-img.png', options, function(err, newFile) {\n     *   // Your bucket now contains:\n     *   // - \"existing-file.png\" (with the contents of `local-img.png')\n     *\n     *   // Note:\n     *   // The `newFile` parameter is equal to `file`.\n     * });\n     *\n     * //-\n     * // To use\n     * // <a\n     * href=\"https://cloud.google.com/storage/docs/encryption#customer-supplied\">\n     * // Customer-supplied Encryption Keys</a>, provide the `encryptionKey`\n     * option.\n     * //-\n     * const crypto = require('crypto');\n     * const encryptionKey = crypto.randomBytes(32);\n     *\n     * bucket.upload('img.png', {\n     *   encryptionKey: encryptionKey\n     * }, function(err, newFile) {\n     *   // `img.png` was uploaded with your custom encryption key.\n     *\n     *   // `newFile` is already configured to use the encryption key when making\n     *   // operations on the remote object.\n     *\n     *   // However, to use your encryption key later, you must create a `File`\n     *   // instance with the `key` supplied:\n     *   const file = bucket.file('img.png', {\n     *     encryptionKey: encryptionKey\n     *   });\n     *\n     *   // Or with `file#setEncryptionKey`:\n     *   const file = bucket.file('img.png');\n     *   file.setEncryptionKey(encryptionKey);\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.upload('local-image.png').then(function(data) {\n     *   const file = data[0];\n     * });\n     *\n     * To upload a file from a URL, use {@link File#createWriteStream}.\n     *\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_upload_file\n     * Another example:\n     *\n     * @example <caption>include:samples/encryption.js</caption>\n     * region_tag:storage_upload_encrypted_file\n     * Example of uploading an encrypted file:\n     */\n    upload(pathString, optionsOrCallback, callback) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (global['GCLOUD_SANDBOX_ENV']) {\n            return;\n        }\n        let options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        options = Object.assign({\n            metadata: {},\n        }, options);\n        let newFile;\n        if (options.destination instanceof file_1.File) {\n            newFile = options.destination;\n        }\n        else if (options.destination !== null &&\n            typeof options.destination === 'string') {\n            // Use the string as the name of the file.\n            newFile = this.file(options.destination, {\n                encryptionKey: options.encryptionKey,\n                kmsKeyName: options.kmsKeyName,\n            });\n        }\n        else {\n            // Resort to using the name of the incoming file.\n            const destination = path.basename(pathString);\n            newFile = this.file(destination, {\n                encryptionKey: options.encryptionKey,\n                kmsKeyName: options.kmsKeyName,\n            });\n        }\n        if (options.resumable !== null && typeof options.resumable === 'boolean') {\n            upload();\n        }\n        else {\n            // Determine if the upload should be resumable if it's over the threshold.\n            fs.stat(pathString, (err, fd) => {\n                if (err) {\n                    callback(err);\n                    return;\n                }\n                if (fd.size <= RESUMABLE_THRESHOLD) {\n                    // Only disable resumable uploads so createWriteStream still attempts them and falls back to simple upload.\n                    options.resumable = false;\n                }\n                upload();\n            });\n        }\n        function upload() {\n            const writable = newFile.createWriteStream(options);\n            if (options.onUploadProgress) {\n                writable.on('progress', options.onUploadProgress);\n            }\n            fs.createReadStream(pathString)\n                .on('error', callback)\n                .pipe(writable)\n                .on('error', callback)\n                .on('finish', () => {\n                callback(null, newFile, newFile.metadata);\n            });\n        }\n    }\n    /**\n     * @private\n     *\n     * @typedef {object} MakeAllFilesPublicPrivateOptions\n     * @property {boolean} [force] Suppress errors until all files have been\n     *     processed.\n     * @property {boolean} [private] Make files private.\n     * @property {boolean} [public] Make files public.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @private\n     *\n     * @callback SetBucketMetadataCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files Files that were updated.\n     */\n    /**\n     * @typedef {array} MakeAllFilesPublicPrivateResponse\n     * @property {File[]} 0 List of files affected.\n     */\n    /**\n     * Iterate over all of a bucket's files, calling `file.makePublic()` (public)\n     * or `file.makePrivate()` (private) on each.\n     *\n     * Operations are performed in parallel, up to 10 at once. The first error\n     * breaks the loop, and will execute the provided callback with it. Specify\n     * `{ force: true }` to suppress the errors.\n     *\n     * @private\n     *\n     * @param {MakeAllFilesPublicPrivateOptions} [options] Configuration options.\n     * @param {MakeAllFilesPublicPrivateCallback} callback Callback function.\n     *\n     * @return {Promise<MakeAllFilesPublicPrivateResponse>}\n     */\n    makeAllFilesPublicPrivate_(optionsOrCallback, callback) {\n        const MAX_PARALLEL_LIMIT = 10;\n        const errors = [];\n        const updatedFiles = [];\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const processFile = async (file) => {\n            try {\n                await (options.public ? file.makePublic() : file.makePrivate(options));\n                updatedFiles.push(file);\n            }\n            catch (e) {\n                if (!options.force) {\n                    throw e;\n                }\n                errors.push(e);\n            }\n        };\n        this.getFiles(options)\n            .then(([files]) => {\n            const limit = pLimit(MAX_PARALLEL_LIMIT);\n            const promises = files.map(file => {\n                return limit(() => processFile(file));\n            });\n            return Promise.all(promises);\n        })\n            .then(() => callback(errors.length > 0 ? errors : null, updatedFiles), err => callback(err, updatedFiles));\n    }\n    getId() {\n        return this.id;\n    }\n}\nexports.Bucket = Bucket;\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\npaginator_1.paginator.extend(Bucket, 'getFiles');\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\npromisify_1.promisifyAll(Bucket, {\n    exclude: ['request', 'file', 'notification'],\n});\n//# sourceMappingURL=bucket.js.map"]},"metadata":{},"sourceType":"script"}