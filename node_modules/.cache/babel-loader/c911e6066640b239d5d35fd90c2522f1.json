{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nvar _classCallCheck = require(\"D:\\\\medium clone\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\medium clone\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar gax = require(\"google-gax\");\n\nvar path = require(\"path\");\n\nvar gapicConfig = require(\"./firestore_client_config.json\"); // tslint:disable deprecation\n\n\nvar version = require('../../../package.json').version;\n/**\n *  The Cloud Firestore service.\n *\n *  This service exposes several types of comparable timestamps:\n *\n *  *    `create_time` - The time at which a document was created. Changes only\n *       when a document is deleted, then re-created. Increases in a strict\n *        monotonic fashion.\n *  *    `update_time` - The time at which a document was last updated. Changes\n *       every time a document is modified. Does not change when a write results\n *       in no modifications. Increases in a strict monotonic fashion.\n *  *    `read_time` - The time at which a particular state was observed. Used\n *       to denote a consistent snapshot of the database or the time at which a\n *       Document was observed to not exist.\n *  *    `commit_time` - The time at which the writes in a transaction were\n *       committed. Any read with an equal or greater `read_time` is guaranteed\n *       to see the effects of the transaction.\n * @class\n * @deprecated Use v1/firestore_client instead.\n * @memberof v1beta1\n */\n\n\nvar FirestoreClient = /*#__PURE__*/function () {\n  /**\n   * Construct an instance of FirestoreClient.\n   *\n   * @param {object} [options] - The configuration object. See the subsequent\n   *   parameters for more details.\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   */\n  function FirestoreClient(opts) {\n    _classCallCheck(this, FirestoreClient);\n\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    }; // Ensure that options include the service address and port.\n\n    var staticMembers = this.constructor;\n    var servicePath = opts && opts.servicePath ? opts.servicePath : opts && opts.apiEndpoint ? opts.apiEndpoint : staticMembers.servicePath;\n    var port = opts && opts.port ? opts.port : staticMembers.port;\n\n    if (!opts) {\n      opts = {\n        servicePath: servicePath,\n        port: port\n      };\n    }\n\n    opts.servicePath = opts.servicePath || servicePath;\n    opts.port = opts.port || port; // users can override the config from client side, like retry codes name.\n    // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/master/src/gax.ts#L546\n    // The way to override client config for Showcase API:\n    //\n    // const customConfig = {\"interfaces\": {\"google.showcase.v1beta1.Echo\": {\"methods\": {\"Echo\": {\"retry_codes_name\": \"idempotent\", \"retry_params_name\": \"default\"}}}}}\n    // const showcaseClient = new showcaseClient({ projectId, customConfig });\n\n    opts.clientConfig = opts.clientConfig || {}; // If we're running in browser, it's OK to omit `fallback` since\n    // google-gax has `browser` field in its `package.json`.\n    // For Electron (which does not respect `browser` field),\n    // pass `{fallback: true}` to the FirestoreClient constructor.\n\n    this._gaxModule = opts.fallback ? gax.fallback : gax; // Create a `gaxGrpc` object, with any grpc-specific options\n    // sent to the client.\n\n    opts.scopes = this.constructor.scopes;\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Determine the client header string.\n\n    var clientHeader = [\"gax/\".concat(this._gaxModule.version), \"gapic/\".concat(version)];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(\"gl-node/\".concat(process.versions.node));\n    } else {\n      clientHeader.push(\"gl-web/\".concat(this._gaxModule.version));\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(\"grpc/\".concat(this._gaxGrpc.grpcVersion));\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(\"\".concat(opts.libName, \"/\").concat(opts.libVersion));\n    } // Load the applicable protos.\n    // For Node.js, pass the path to JSON proto file.\n    // For browsers, pass the JSON content.\n\n\n    var nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n    this._protos = this._gaxGrpc.loadProto(opts.fallback ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('../../protos/protos.json') : nodejsProtoPath); // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this.descriptors.page = {\n      listDocuments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'documents'),\n      listCollectionIds: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'collectionIds')\n    }; // Some of the methods on this service provide streaming responses.\n    // Provide descriptors for these.\n\n    this.descriptors.stream = {\n      batchGetDocuments: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),\n      runQuery: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),\n      write: new this._gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING),\n      listen: new this._gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING)\n    }; // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.firestore.v1beta1.Firestore', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {};\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  _createClass(FirestoreClient, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this = this;\n\n      // If the client stub promise is already initialized, return immediately.\n      if (this.firestoreStub) {\n        return this.firestoreStub;\n      } // Put together the \"service stub\" for\n      // google.firestore.v1beta1.Firestore.\n\n\n      this.firestoreStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.firestore.v1beta1.Firestore') : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this._protos.google.firestore.v1beta1.Firestore, this._opts); // Iterate over each of the methods that the service provides\n      // and create an API call method for each.\n\n      var firestoreStubMethods = ['getDocument', 'listDocuments', 'createDocument', 'updateDocument', 'deleteDocument', 'batchGetDocuments', 'beginTransaction', 'commit', 'rollback', 'runQuery', 'write', 'listen', 'listCollectionIds'];\n\n      var _loop = function _loop() {\n        var methodName = _firestoreStubMethods[_i];\n\n        var callPromise = _this.firestoreStub.then(function (stub) {\n          return function () {\n            if (_this._terminated) {\n              return Promise.reject('The client has already been closed.');\n            }\n\n            var func = stub[methodName];\n\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            return func.apply(stub, args);\n          };\n        }, function (err) {\n          return function () {\n            throw err;\n          };\n        });\n\n        var apiCall = _this._gaxModule.createApiCall(callPromise, _this._defaults[methodName], _this.descriptors.page[methodName] || _this.descriptors.stream[methodName] || _this.descriptors.longrunning[methodName]);\n\n        _this.innerApiCalls[methodName] = apiCall;\n      };\n\n      for (var _i = 0, _firestoreStubMethods = firestoreStubMethods; _i < _firestoreStubMethods.length; _i++) {\n        _loop();\n      }\n\n      return this.firestoreStub;\n    }\n    /**\n     * The DNS address for this API service.\n     */\n\n  }, {\n    key: \"getProjectId\",\n\n    /**\n     * Return the project ID used by this class.\n     * @param {function(Error, string)} callback - the callback to\n     *   be called with the current project Id.\n     */\n    value: function getProjectId(callback) {\n      if (callback) {\n        this.auth.getProjectId(callback);\n        return;\n      }\n\n      return this.auth.getProjectId();\n    }\n    /**\n     * Gets a single document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The resource name of the Document to get. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If the document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads the document in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads the version of the document at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Document]{@link google.firestore.v1beta1.Document}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n\n  }, {\n    key: \"getDocument\",\n    value: function getDocument(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        name: request.name || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.getDocument(request, options, callback);\n    }\n    /**\n     * Creates a new document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource. For example:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`.\n     * @param {string} request.documentId\n     *   The client-assigned document ID to use for this document.\n     *\n     *   Optional. If not specified, an ID will be assigned by the service.\n     * @param {google.firestore.v1beta1.Document} request.document\n     *   Required. The document to create. `name` must not be set.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If the document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Document]{@link google.firestore.v1beta1.Document}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n\n  }, {\n    key: \"createDocument\",\n    value: function createDocument(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.createDocument(request, options, callback);\n    }\n    /**\n     * Updates or inserts a document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.firestore.v1beta1.Document} request.document\n     *   Required. The updated document.\n     *   Creates the document if it does not already exist.\n     * @param {google.firestore.v1beta1.DocumentMask} request.updateMask\n     *   The fields to update.\n     *   None of the field paths in the mask may contain a reserved name.\n     *\n     *   If the document exists on the server and has fields not referenced in the\n     *   mask, they are left unchanged.\n     *   Fields referenced in the mask, but not present in the input document, are\n     *   deleted from the document on the server.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If the document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {google.firestore.v1beta1.Precondition} request.currentDocument\n     *   An optional precondition on the document.\n     *   The request will fail if this is set and not met by the target document.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Document]{@link google.firestore.v1beta1.Document}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n\n  }, {\n    key: \"updateDocument\",\n    value: function updateDocument(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        'document.name': request.document.name || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.updateDocument(request, options, callback);\n    }\n    /**\n     * Deletes a document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The resource name of the Document to delete. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     * @param {google.firestore.v1beta1.Precondition} request.currentDocument\n     *   An optional precondition on the document.\n     *   The request will fail if this is set and not met by the target document.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n\n  }, {\n    key: \"deleteDocument\",\n    value: function deleteDocument(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        name: request.name || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.deleteDocument(request, options, callback);\n    }\n    /**\n     * Starts a new transaction.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {google.firestore.v1beta1.TransactionOptions} request.options\n     *   The options for the transaction.\n     *   Defaults to a read-write transaction.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [BeginTransactionResponse]{@link google.firestore.v1beta1.BeginTransactionResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n\n  }, {\n    key: \"beginTransaction\",\n    value: function beginTransaction(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        database: request.database || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.beginTransaction(request, options, callback);\n    }\n    /**\n     * Commits a transaction, while optionally updating documents.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {number[]} request.writes\n     *   The writes to apply.\n     *\n     *   Always executed atomically and in order.\n     * @param {Buffer} request.transaction\n     *   If set, applies all writes in this transaction, and commits it.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [CommitResponse]{@link google.firestore.v1beta1.CommitResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n\n  }, {\n    key: \"commit\",\n    value: function commit(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        database: request.database || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.commit(request, options, callback);\n    }\n    /**\n     * Rolls back a transaction.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {Buffer} request.transaction\n     *   Required. The transaction to roll back.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n\n  }, {\n    key: \"rollback\",\n    value: function rollback(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        database: request.database || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.rollback(request, options, callback);\n    }\n    /**\n     * Gets multiple documents.\n     *\n     * Documents returned by this method are not guaranteed to be returned in the\n     * same order that they were requested.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {string[]} request.documents\n     *   The names of the documents to retrieve. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   The request will fail if any of the document is not a child resource of the\n     *   given `database`. Duplicate names will be elided.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field will\n     *   not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.firestore.v1beta1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction and reads the documents.\n     *   Defaults to a read-only transaction.\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits [BatchGetDocumentsResponse]{@link google.firestore.v1beta1.BatchGetDocumentsResponse} on 'data' event.\n     */\n\n  }, {\n    key: \"batchGetDocuments\",\n    value: function batchGetDocuments(request, options) {\n      request = request || {};\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        database: request.database || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.batchGetDocuments(request, options);\n    }\n    /**\n     * Runs a query.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {google.firestore.v1beta1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.firestore.v1beta1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction and reads the documents.\n     *   Defaults to a read-only transaction.\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits [RunQueryResponse]{@link google.firestore.v1beta1.RunQueryResponse} on 'data' event.\n     */\n\n  }, {\n    key: \"runQuery\",\n    value: function runQuery(request, options) {\n      request = request || {};\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.runQuery(request, options);\n    }\n    /**\n     * Streams batches of document updates and deletes, in order.\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing [WriteRequest]{@link google.firestore.v1beta1.WriteRequest} for write() method, and\n     *   will emit objects representing [WriteResponse]{@link google.firestore.v1beta1.WriteResponse} on 'data' event asynchronously.\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(options) {\n      this.initialize();\n      return this.innerApiCalls.write({}, options);\n    }\n    /**\n     * Listens to changes.\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing [ListenRequest]{@link google.firestore.v1beta1.ListenRequest} for write() method, and\n     *   will emit objects representing [ListenResponse]{@link google.firestore.v1beta1.ListenResponse} on 'data' event asynchronously.\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(options) {\n      this.initialize();\n      return this.innerApiCalls.listen({}, options);\n    }\n    /**\n     * Lists documents.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n     *   or `messages`.\n     * @param {number} request.pageSize\n     *   The maximum number of documents to return.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous List request, if any.\n     * @param {string} request.orderBy\n     *   The order to sort results by. For example: `priority desc, name`.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents. A missing document is a\n     *   document that does not exist but has sub-documents. These documents will\n     *   be returned with a key but will not have fields, {@link google.firestore.v1beta1.Document.create_time|Document.create_time},\n     *   or {@link google.firestore.v1beta1.Document.update_time|Document.update_time} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or\n     *   `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Document]{@link google.firestore.v1beta1.Document}.\n     *   The client library support auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *\n     *   When autoPaginate: false is specified through options, the array has three elements.\n     *   The first element is Array of [Document]{@link google.firestore.v1beta1.Document} that corresponds to\n     *   the one page received from the API server.\n     *   If the second element is not null it contains the request object of type [ListDocumentsRequest]{@link google.firestore.v1beta1.ListDocumentsRequest}\n     *   that can be used to obtain the next page of the results.\n     *   If it is null, the next page does not exist.\n     *   The third element contains the raw response received from the API server. Its type is\n     *   [ListDocumentsResponse]{@link google.firestore.v1beta1.ListDocumentsResponse}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n\n  }, {\n    key: \"listDocuments\",\n    value: function listDocuments(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.listDocuments(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listDocuments}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listDocuments} continuously\n     * and invokes the callback registered for 'data' event for each element in the\n     * responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n     *   or `messages`.\n     * @param {number} request.pageSize\n     *   The maximum number of documents to return.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous List request, if any.\n     * @param {string} request.orderBy\n     *   The order to sort results by. For example: `priority desc, name`.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents. A missing document is a\n     *   document that does not exist but has sub-documents. These documents will\n     *   be returned with a key but will not have fields, {@link google.firestore.v1beta1.Document.create_time|Document.create_time},\n     *   or {@link google.firestore.v1beta1.Document.update_time|Document.update_time} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or\n     *   `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Document]{@link google.firestore.v1beta1.Document} on 'data' event.\n     */\n\n  }, {\n    key: \"listDocumentsStream\",\n    value: function listDocumentsStream(request, options) {\n      request = request || {};\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      var callSettings = new gax.CallSettings(options);\n      this.initialize();\n      return this.descriptors.page.listDocuments.createStream(this.innerApiCalls.listDocuments, request, callSettings);\n    }\n    /**\n     * Equivalent to {@link listDocuments}, but returns an iterable object.\n     *\n     * for-await-of syntax is used with the iterable to recursively get response element on-demand.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n     *   or `messages`.\n     * @param {number} request.pageSize\n     *   The maximum number of documents to return.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous List request, if any.\n     * @param {string} request.orderBy\n     *   The order to sort results by. For example: `priority desc, name`.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents. A missing document is a\n     *   document that does not exist but has sub-documents. These documents will\n     *   be returned with a key but will not have fields, {@link google.firestore.v1beta1.Document.create_time|Document.create_time},\n     *   or {@link google.firestore.v1beta1.Document.update_time|Document.update_time} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or\n     *   `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\n     */\n\n  }, {\n    key: \"listDocumentsAsync\",\n    value: function listDocumentsAsync(request, options) {\n      request = request || {};\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      options = options || {};\n      var callSettings = new gax.CallSettings(options);\n      this.initialize();\n      return this.descriptors.page.listDocuments.asyncIterate(this.innerApiCalls['listDocuments'], request, callSettings);\n    }\n    /**\n     * Lists all the collection IDs underneath a document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link google.firestore.v1beta1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of string.\n     *   The client library support auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *\n     *   When autoPaginate: false is specified through options, the array has three elements.\n     *   The first element is Array of string that corresponds to\n     *   the one page received from the API server.\n     *   If the second element is not null it contains the request object of type [ListCollectionIdsRequest]{@link google.firestore.v1beta1.ListCollectionIdsRequest}\n     *   that can be used to obtain the next page of the results.\n     *   If it is null, the next page does not exist.\n     *   The third element contains the raw response received from the API server. Its type is\n     *   [ListCollectionIdsResponse]{@link google.firestore.v1beta1.ListCollectionIdsResponse}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n\n  }, {\n    key: \"listCollectionIds\",\n    value: function listCollectionIds(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.listCollectionIds(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listCollectionIds}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listCollectionIds} continuously\n     * and invokes the callback registered for 'data' event for each element in the\n     * responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link google.firestore.v1beta1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing string on 'data' event.\n     */\n\n  }, {\n    key: \"listCollectionIdsStream\",\n    value: function listCollectionIdsStream(request, options) {\n      request = request || {};\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      var callSettings = new gax.CallSettings(options);\n      this.initialize();\n      return this.descriptors.page.listCollectionIds.createStream(this.innerApiCalls.listCollectionIds, request, callSettings);\n    }\n    /**\n     * Equivalent to {@link listCollectionIds}, but returns an iterable object.\n     *\n     * for-await-of syntax is used with the iterable to recursively get response element on-demand.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link google.firestore.v1beta1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\n     */\n\n  }, {\n    key: \"listCollectionIdsAsync\",\n    value: function listCollectionIdsAsync(request, options) {\n      request = request || {};\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      options = options || {};\n      var callSettings = new gax.CallSettings(options);\n      this.initialize();\n      return this.descriptors.page.listCollectionIds.asyncIterate(this.innerApiCalls['listCollectionIds'], request, callSettings);\n    }\n    /**\n     * Terminate the GRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this2 = this;\n\n      this.initialize();\n\n      if (!this._terminated) {\n        return this.firestoreStub.then(function (stub) {\n          _this2._terminated = true;\n          stub.close();\n        });\n      }\n\n      return Promise.resolve();\n    }\n  }], [{\n    key: \"servicePath\",\n    get: function get() {\n      return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     */\n\n  }, {\n    key: \"apiEndpoint\",\n    get: function get() {\n      return 'firestore.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     */\n\n  }, {\n    key: \"port\",\n    get: function get() {\n      return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     */\n\n  }, {\n    key: \"scopes\",\n    get: function get() {\n      return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/datastore'];\n    }\n  }]);\n\n  return FirestoreClient;\n}();\n\nexports.FirestoreClient = FirestoreClient;","map":{"version":3,"sources":["D:/medium clone/node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_client.js"],"names":["Object","defineProperty","exports","value","gax","require","path","gapicConfig","version","FirestoreClient","opts","_terminated","descriptors","page","stream","longrunning","batching","staticMembers","constructor","servicePath","apiEndpoint","port","clientConfig","_gaxModule","fallback","scopes","_gaxGrpc","GrpcClient","_opts","auth","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","nodejsProtoPath","join","__dirname","_protos","loadProto","listDocuments","PageDescriptor","listCollectionIds","batchGetDocuments","StreamDescriptor","StreamType","SERVER_STREAMING","runQuery","write","BIDI_STREAMING","listen","_defaults","constructSettings","innerApiCalls","firestoreStub","createStub","lookupService","google","firestore","v1beta1","Firestore","firestoreStubMethods","methodName","callPromise","then","stub","Promise","reject","func","args","apply","err","apiCall","createApiCall","callback","getProjectId","request","optionsOrCallback","options","undefined","otherArgs","headers","routingHeader","fromParams","name","initialize","getDocument","parent","createDocument","document","updateDocument","deleteDocument","database","beginTransaction","commit","rollback","callSettings","CallSettings","createStream","asyncIterate","close","resolve"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gax = require(\"google-gax\");\nconst path = require(\"path\");\nconst gapicConfig = require(\"./firestore_client_config.json\");\n// tslint:disable deprecation\nconst version = require('../../../package.json').version;\n/**\n *  The Cloud Firestore service.\n *\n *  This service exposes several types of comparable timestamps:\n *\n *  *    `create_time` - The time at which a document was created. Changes only\n *       when a document is deleted, then re-created. Increases in a strict\n *        monotonic fashion.\n *  *    `update_time` - The time at which a document was last updated. Changes\n *       every time a document is modified. Does not change when a write results\n *       in no modifications. Increases in a strict monotonic fashion.\n *  *    `read_time` - The time at which a particular state was observed. Used\n *       to denote a consistent snapshot of the database or the time at which a\n *       Document was observed to not exist.\n *  *    `commit_time` - The time at which the writes in a transaction were\n *       committed. Any read with an equal or greater `read_time` is guaranteed\n *       to see the effects of the transaction.\n * @class\n * @deprecated Use v1/firestore_client instead.\n * @memberof v1beta1\n */\nclass FirestoreClient {\n    /**\n     * Construct an instance of FirestoreClient.\n     *\n     * @param {object} [options] - The configuration object. See the subsequent\n     *   parameters for more details.\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     */\n    constructor(opts) {\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include the service address and port.\n        const staticMembers = this.constructor;\n        const servicePath = opts && opts.servicePath\n            ? opts.servicePath\n            : opts && opts.apiEndpoint\n                ? opts.apiEndpoint\n                : staticMembers.servicePath;\n        const port = opts && opts.port ? opts.port : staticMembers.port;\n        if (!opts) {\n            opts = { servicePath, port };\n        }\n        opts.servicePath = opts.servicePath || servicePath;\n        opts.port = opts.port || port;\n        // users can override the config from client side, like retry codes name.\n        // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/master/src/gax.ts#L546\n        // The way to override client config for Showcase API:\n        //\n        // const customConfig = {\"interfaces\": {\"google.showcase.v1beta1.Echo\": {\"methods\": {\"Echo\": {\"retry_codes_name\": \"idempotent\", \"retry_params_name\": \"default\"}}}}}\n        // const showcaseClient = new showcaseClient({ projectId, customConfig });\n        opts.clientConfig = opts.clientConfig || {};\n        // If we're running in browser, it's OK to omit `fallback` since\n        // google-gax has `browser` field in its `package.json`.\n        // For Electron (which does not respect `browser` field),\n        // pass `{fallback: true}` to the FirestoreClient constructor.\n        this._gaxModule = opts.fallback ? gax.fallback : gax;\n        // Create a `gaxGrpc` object, with any grpc-specific options\n        // sent to the client.\n        opts.scopes = this.constructor.scopes;\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        // For Node.js, pass the path to JSON proto file.\n        // For browsers, pass the JSON content.\n        const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n        this._protos = this._gaxGrpc.loadProto(opts.fallback\n            ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n                require('../../protos/protos.json')\n            : nodejsProtoPath);\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listDocuments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'documents'),\n            listCollectionIds: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'collectionIds'),\n        };\n        // Some of the methods on this service provide streaming responses.\n        // Provide descriptors for these.\n        this.descriptors.stream = {\n            batchGetDocuments: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),\n            runQuery: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),\n            write: new this._gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING),\n            listen: new this._gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.firestore.v1beta1.Firestore', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.firestoreStub) {\n            return this.firestoreStub;\n        }\n        // Put together the \"service stub\" for\n        // google.firestore.v1beta1.Firestore.\n        this.firestoreStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.firestore.v1beta1.Firestore')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.firestore.v1beta1.Firestore, this._opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const firestoreStubMethods = [\n            'getDocument',\n            'listDocuments',\n            'createDocument',\n            'updateDocument',\n            'deleteDocument',\n            'batchGetDocuments',\n            'beginTransaction',\n            'commit',\n            'rollback',\n            'runQuery',\n            'write',\n            'listen',\n            'listCollectionIds',\n        ];\n        for (const methodName of firestoreStubMethods) {\n            const callPromise = this.firestoreStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], this.descriptors.page[methodName] ||\n                this.descriptors.stream[methodName] ||\n                this.descriptors.longrunning[methodName]);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.firestoreStub;\n    }\n    /**\n     * The DNS address for this API service.\n     */\n    static get servicePath() {\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     */\n    static get apiEndpoint() {\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/datastore',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @param {function(Error, string)} callback - the callback to\n     *   be called with the current project Id.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Gets a single document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The resource name of the Document to get. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If the document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads the document in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads the version of the document at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Document]{@link google.firestore.v1beta1.Document}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    getDocument(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.getDocument(request, options, callback);\n    }\n    /**\n     * Creates a new document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource. For example:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`.\n     * @param {string} request.documentId\n     *   The client-assigned document ID to use for this document.\n     *\n     *   Optional. If not specified, an ID will be assigned by the service.\n     * @param {google.firestore.v1beta1.Document} request.document\n     *   Required. The document to create. `name` must not be set.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If the document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Document]{@link google.firestore.v1beta1.Document}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    createDocument(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.createDocument(request, options, callback);\n    }\n    /**\n     * Updates or inserts a document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.firestore.v1beta1.Document} request.document\n     *   Required. The updated document.\n     *   Creates the document if it does not already exist.\n     * @param {google.firestore.v1beta1.DocumentMask} request.updateMask\n     *   The fields to update.\n     *   None of the field paths in the mask may contain a reserved name.\n     *\n     *   If the document exists on the server and has fields not referenced in the\n     *   mask, they are left unchanged.\n     *   Fields referenced in the mask, but not present in the input document, are\n     *   deleted from the document on the server.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If the document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {google.firestore.v1beta1.Precondition} request.currentDocument\n     *   An optional precondition on the document.\n     *   The request will fail if this is set and not met by the target document.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Document]{@link google.firestore.v1beta1.Document}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    updateDocument(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            'document.name': request.document.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.updateDocument(request, options, callback);\n    }\n    /**\n     * Deletes a document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The resource name of the Document to delete. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     * @param {google.firestore.v1beta1.Precondition} request.currentDocument\n     *   An optional precondition on the document.\n     *   The request will fail if this is set and not met by the target document.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    deleteDocument(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.deleteDocument(request, options, callback);\n    }\n    /**\n     * Starts a new transaction.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {google.firestore.v1beta1.TransactionOptions} request.options\n     *   The options for the transaction.\n     *   Defaults to a read-write transaction.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [BeginTransactionResponse]{@link google.firestore.v1beta1.BeginTransactionResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    beginTransaction(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            database: request.database || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.beginTransaction(request, options, callback);\n    }\n    /**\n     * Commits a transaction, while optionally updating documents.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {number[]} request.writes\n     *   The writes to apply.\n     *\n     *   Always executed atomically and in order.\n     * @param {Buffer} request.transaction\n     *   If set, applies all writes in this transaction, and commits it.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [CommitResponse]{@link google.firestore.v1beta1.CommitResponse}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    commit(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            database: request.database || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.commit(request, options, callback);\n    }\n    /**\n     * Rolls back a transaction.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {Buffer} request.transaction\n     *   Required. The transaction to roll back.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    rollback(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            database: request.database || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.rollback(request, options, callback);\n    }\n    /**\n     * Gets multiple documents.\n     *\n     * Documents returned by this method are not guaranteed to be returned in the\n     * same order that they were requested.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {string[]} request.documents\n     *   The names of the documents to retrieve. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   The request will fail if any of the document is not a child resource of the\n     *   given `database`. Duplicate names will be elided.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field will\n     *   not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.firestore.v1beta1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction and reads the documents.\n     *   Defaults to a read-only transaction.\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits [BatchGetDocumentsResponse]{@link google.firestore.v1beta1.BatchGetDocumentsResponse} on 'data' event.\n     */\n    batchGetDocuments(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            database: request.database || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.batchGetDocuments(request, options);\n    }\n    /**\n     * Runs a query.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {google.firestore.v1beta1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.firestore.v1beta1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction and reads the documents.\n     *   Defaults to a read-only transaction.\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits [RunQueryResponse]{@link google.firestore.v1beta1.RunQueryResponse} on 'data' event.\n     */\n    runQuery(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.runQuery(request, options);\n    }\n    /**\n     * Streams batches of document updates and deletes, in order.\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing [WriteRequest]{@link google.firestore.v1beta1.WriteRequest} for write() method, and\n     *   will emit objects representing [WriteResponse]{@link google.firestore.v1beta1.WriteResponse} on 'data' event asynchronously.\n     */\n    write(options) {\n        this.initialize();\n        return this.innerApiCalls.write({}, options);\n    }\n    /**\n     * Listens to changes.\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing [ListenRequest]{@link google.firestore.v1beta1.ListenRequest} for write() method, and\n     *   will emit objects representing [ListenResponse]{@link google.firestore.v1beta1.ListenResponse} on 'data' event asynchronously.\n     */\n    listen(options) {\n        this.initialize();\n        return this.innerApiCalls.listen({}, options);\n    }\n    /**\n     * Lists documents.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n     *   or `messages`.\n     * @param {number} request.pageSize\n     *   The maximum number of documents to return.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous List request, if any.\n     * @param {string} request.orderBy\n     *   The order to sort results by. For example: `priority desc, name`.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents. A missing document is a\n     *   document that does not exist but has sub-documents. These documents will\n     *   be returned with a key but will not have fields, {@link google.firestore.v1beta1.Document.create_time|Document.create_time},\n     *   or {@link google.firestore.v1beta1.Document.update_time|Document.update_time} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or\n     *   `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Document]{@link google.firestore.v1beta1.Document}.\n     *   The client library support auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *\n     *   When autoPaginate: false is specified through options, the array has three elements.\n     *   The first element is Array of [Document]{@link google.firestore.v1beta1.Document} that corresponds to\n     *   the one page received from the API server.\n     *   If the second element is not null it contains the request object of type [ListDocumentsRequest]{@link google.firestore.v1beta1.ListDocumentsRequest}\n     *   that can be used to obtain the next page of the results.\n     *   If it is null, the next page does not exist.\n     *   The third element contains the raw response received from the API server. Its type is\n     *   [ListDocumentsResponse]{@link google.firestore.v1beta1.ListDocumentsResponse}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    listDocuments(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.listDocuments(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listDocuments}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listDocuments} continuously\n     * and invokes the callback registered for 'data' event for each element in the\n     * responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n     *   or `messages`.\n     * @param {number} request.pageSize\n     *   The maximum number of documents to return.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous List request, if any.\n     * @param {string} request.orderBy\n     *   The order to sort results by. For example: `priority desc, name`.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents. A missing document is a\n     *   document that does not exist but has sub-documents. These documents will\n     *   be returned with a key but will not have fields, {@link google.firestore.v1beta1.Document.create_time|Document.create_time},\n     *   or {@link google.firestore.v1beta1.Document.update_time|Document.update_time} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or\n     *   `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Document]{@link google.firestore.v1beta1.Document} on 'data' event.\n     */\n    listDocumentsStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listDocuments.createStream(this.innerApiCalls.listDocuments, request, callSettings);\n    }\n    /**\n     * Equivalent to {@link listDocuments}, but returns an iterable object.\n     *\n     * for-await-of syntax is used with the iterable to recursively get response element on-demand.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n     *   or `messages`.\n     * @param {number} request.pageSize\n     *   The maximum number of documents to return.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous List request, if any.\n     * @param {string} request.orderBy\n     *   The order to sort results by. For example: `priority desc, name`.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents. A missing document is a\n     *   document that does not exist but has sub-documents. These documents will\n     *   be returned with a key but will not have fields, {@link google.firestore.v1beta1.Document.create_time|Document.create_time},\n     *   or {@link google.firestore.v1beta1.Document.update_time|Document.update_time} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or\n     *   `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\n     */\n    listDocumentsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listDocuments.asyncIterate(this.innerApiCalls['listDocuments'], request, callSettings);\n    }\n    /**\n     * Lists all the collection IDs underneath a document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link google.firestore.v1beta1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of string.\n     *   The client library support auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *\n     *   When autoPaginate: false is specified through options, the array has three elements.\n     *   The first element is Array of string that corresponds to\n     *   the one page received from the API server.\n     *   If the second element is not null it contains the request object of type [ListCollectionIdsRequest]{@link google.firestore.v1beta1.ListCollectionIdsRequest}\n     *   that can be used to obtain the next page of the results.\n     *   If it is null, the next page does not exist.\n     *   The third element contains the raw response received from the API server. Its type is\n     *   [ListCollectionIdsResponse]{@link google.firestore.v1beta1.ListCollectionIdsResponse}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n     */\n    listCollectionIds(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.listCollectionIds(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listCollectionIds}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listCollectionIds} continuously\n     * and invokes the callback registered for 'data' event for each element in the\n     * responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link google.firestore.v1beta1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing string on 'data' event.\n     */\n    listCollectionIdsStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listCollectionIds.createStream(this.innerApiCalls.listCollectionIds, request, callSettings);\n    }\n    /**\n     * Equivalent to {@link listCollectionIds}, but returns an iterable object.\n     *\n     * for-await-of syntax is used with the iterable to recursively get response element on-demand.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link google.firestore.v1beta1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\n     */\n    listCollectionIdsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listCollectionIds.asyncIterate(this.innerApiCalls['listCollectionIds'], request, callSettings);\n    }\n    /**\n     * Terminate the GRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     */\n    close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.firestoreStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.FirestoreClient = FirestoreClient;\n//# sourceMappingURL=firestore_client.js.map"]},"metadata":{},"sourceType":"script"}